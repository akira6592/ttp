<template>

<!--one more template###############################################################################################-->
<template
name="template-1" 
description="Groups to test various function"
>
<vars>
vlans = "unrange(rangechar='-', joinchar=',') | joinmatches(',')"
</vars>

<!--to test chain with unrange and joinmatches-->
<input name="test1-1" load="text" groups="interfaces">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173  
 switchport trunk allowed vlan add 400,401,410	 	
</input>

<group name="interfaces" output="test1-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans | chain("vlans") }}
</group>

<output 
name="test1-1" 
load="json" 
functions="is_equal" 
description="test vlans unrange, joinmatches, trailing tabs/spaces" 
>
{
    "interfaces": {
        "interface": "GigabitEthernet3/3",
        "trunk_vlans": "138,166,167,168,169,170,171,172,173,400,401,410"
    }
}
</output>


<!--test contains('vlan') for interfaces-->
<input name="test1-2" load="text" groups="SVIs">
interface Vlan123
 description Desks vlan
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
 ip address 192.168.222.1 255.255.255.0
!
interface Loopback0
 description Routing ID loopback
</input>

<group name="SVIs" output="test1-2">
interface {{ interface | contains("Vlan") }}
 description {{ description | ORPHRASE}}
 ip address {{ ip }} {{ mask }}
</group>

<output 
name="test1-2" 
load="python" 
functions="is_equal" 
description="test that only interaces with vlan got to results"
>
{'SVIs': [{'interface': 'Vlan123', 'description': 'Desks vlan', 'ip': '192.168.123.1', 'mask': '255.255.255.0'}, {'interface': 'Vlan222', 'description': 'Phones vlan', 'ip': '192.168.222.1', 'mask': '255.255.255.0'}]}
</output>


<!--test containsall for group results-->
<input 
name="test1-3" 
load="text" 
groups="interfaces_contansall"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contansall" containsall="ip, vrf" output="test1-3">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-3"
load="json"
functions="is_equal"
description="test containsall for group"
>
{
    "interfaces_contansall": {
        "description": "Management",
        "interface": "Vlan777",
        "ip": "192.168.0.1",
        "mask": "24",
        "vrf": "MGMT"
    }
}
</output>


<!--test containsany for group results-->
<input 
name="test1-4" 
load="text" 
groups="interfaces_contains"
>
interface Port-Chanel11
  description Storage Management
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
</input>

<group name="interfaces_contains" contains="ip,vrf" output="test1-4">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-4"
load="json"
functions="is_equal"
description="test contains any for group"
>
{
    "interfaces_contains": [
        {
            "description": "RID",
            "interface": "Loopback0",
            "ip": "10.0.0.3",
            "mask": "24"
        },
        {
            "description": "Management",
            "interface": "Vlan777",
            "ip": "192.168.0.1",
            "mask": "24",
            "vrf": "MGMT"
        }
    ]
}
</output>


<!--test group table method-->
<input 
name="test1-5" 
load="text" 
groups="arp_table"
>
CSR1Kv-3-lab#show ip arp
Protocol  Address          Age (min)  Hardware Addr   Type   Interface
Internet  10.1.13.1              98   0050.5685.5cd1  ARPA   GigabitEthernet2.13
Internet  10.1.13.3               -   0050.5685.14d5  ARPA   GigabitEthernet2.13
</input>

<group name="arp_table" method="table" output="test1-5">
Internet  {{ ip }}  {{ age | DIGIT }}   {{ mac }}  ARPA   {{ interface }}
Internet  {{ ip }}  -                   {{ mac }}  ARPA   {{ interface }}
</group>

<output name="test1-5"
load="json"
functions="is_equal"
description="test group table method"
>
{
    "arp_table": [
        {
            "age": "98",
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.1",
            "mac": "0050.5685.5cd1"
        },
        {
            "interface": "GigabitEthernet2.13",
            "ip": "10.1.13.3",
            "mac": "0050.5685.14d5"
        }
    ]
}
</output>


<!--test dynamic path-->
<input 
name="test1-6" 
load="text" 
>
ucs-core-switch-1#show run | section bgp
router bgp 65100
  vrf CUST-1
    neighbor 59.100.71.193
      remote-as 65101
      description peer-1
      address-family ipv4 unicast
        route-map RPL-1-IMPORT-v4 in
        route-map RPL-1-EXPORT-V4 out
      address-family ipv6 unicast
        route-map RPL-1-IMPORT-V6 in
        route-map RPL-1-EXPORT-V6 out
    neighbor 59.100.71.209
      remote-as 65102
      description peer-2
      address-family ipv4 unicast
        route-map RPL-2-IMPORT-V6 in
        route-map RPL-2-EXPORT-V6 out
</input>

<group name="router.bgp.BGP_AS_{{ asn }}" input="test1-6" output="test1-6">
router bgp {{ asn }}
  <group name="vrfs.{{ vrf_name }}">
  vrf {{ vrf_name }}
    <group name="peers.{{ peer_ip }}">
    neighbor {{ peer_ip }}
      remote-as {{ peer_asn }}
      description {{ peer_description }}
	  <group name="afi.{{ afi }}.unicast">
      address-family {{ afi }} unicast
        route-map {{ rpl_in }} in
        route-map {{ rpl_out }} out
	  </group>
	</group>
   </group>
</group>

<output name="test1-6"
load="python"
functions="is_equal"
description="test dynamic path and highly hierarchical data"
>
{'router': {'bgp': {'BGP_AS_65100': {'vrfs': {'CUST-1': {'peers': {'59.100.71.193': {'peer_asn': '65101', 'peer_description': 'peer-1', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-1-IMPORT-v4', 'rpl_out': 'RPL-1-EXPORT-V4'}}, 'ipv6': {'unicast': {'rpl_in': 'RPL-1-IMPORT-V6', 'rpl_out': 'RPL-1-EXPORT-V6'}}}}, '59.100.71.209': {'peer_asn': '65102', 'peer_description': 'peer-2', 'afi': {'ipv4': {'unicast': {'rpl_in': 'RPL-2-IMPORT-V6', 'rpl_out': 'RPL-2-EXPORT-V6'}}}}}}}}}}}
</output>


<!--test set function-->
<vars>
mys_set_var = "my_set_value"
</vars>

<input 
name="test1-7" 
load="text" 
>
interface GigabitEthernet3/4
 switchport mode access 
 switchport trunk encapsulation dot1q
 switchport mode trunk
 switchport nonegotiate
 shutdown
!
interface GigabitEthernet3/7
 switchport mode access 
 switchport mode trunk
 switchport nonegotiate
!
</input>

<group name="interfacesset" input="test1-7" output="test1-7">
interface {{ interface }}
 switchport mode access {{ mode_access | set("True") }}
 switchport trunk encapsulation dot1q {{ encap | set("dot1q") }}
 switchport mode trunk {{ mode | set("Trunk") }} {{ vlans | set("all_vlans") }}
 shutdown {{ disabled | set("True") }} {{ test_var | set("mys_set_var") }}
!{{ _end_ }}
</group>

<output name="test1-7"
functions="is_equal"
description="test set function"
load="python"
>
{
    "interfacesset": [
        {
            "disabled": "True",
            "encap": "dot1q",
            "interface": "GigabitEthernet3/4",
            "mode": "Trunk",
            "mode_access": "True",
            "test_var": "my_set_value",
            "vlans": "all_vlans"
        },
        {
            "interface": "GigabitEthernet3/7",
            "mode": "Trunk",
            "mode_access": "True",
            "vlans": "all_vlans"
        }
    ]
}
</output>



<!--test dynamic path with regex formatters-->
<input 
name="test1-8" 
load="text" 
>
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group name="interfaces*.{{ interface }}" output="test1-8" input="test1-8">
interface {{ interface }}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
</group>

<output name="test1-8"
functions="is_equal"
description="test dynamic path with regex formatters"
load="json"
>
{
     "interfaces": [
         {
             "Loopback0": {
                 "description": "RID",
                 "ip": "10.0.0.3",
                 "mask": "24"
             },
             "Port-Chanel11": {
                 "description": "Storage"
             },
             "Vlan777": {
                 "description": "Management",
                 "ip": "192.168.0.1",
                 "mask": "24",
                 "vrf": "MGMT"
             }
         }
     ]
}
</output>

<input load="text" name="test1-9">
interface Port-Chanel11
  description Storage
!
interface Loopback0
  description RID
  ip address 10.0.0.3/24
!
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<group input="test1-9" output="test1-9">
interface {{ interface }}
  description {{ description }}
<group name = "ips">
  ip address {{ ip }}/{{ mask }}
</group>
  vrf {{ vrf }}
!{{_end_}}
</group>

<output name="test1-9"
functions="is_equal"
description="test top group without name attribute with _anonymous_ path"
load="json"
>
[
    {
        "description": "Storage",
        "interface": "Port-Chanel11"
    },
    {
        "description": "RID",
        "interface": "Loopback0",
        "ips": {
            "ip": "10.0.0.3",
            "mask": "24"
        }
    },
    {
        "description": "Management",
        "interface": "Vlan777",
        "ips": {
            "ip": "192.168.0.1",
            "mask": "24"
        },
        "vrf": "MGMT"
    }
]
</output>


<input name="test1-10" load="text">
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan778
  description Management
  switchport mode trunk
  switchport trunk allowed vlans 23,24,37
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>

<vars>
my_var = "L2VC"
</vars>

<group name="interfaces_with_set" input="test1-10" output="test1-10">
interface {{ interface }}
  description {{ description }}
  switchport mode trunk {{ mode | set("trunk") }} {{ vlans_trunk | set("1-4096") }}
  switchport trunk allowed vlans {{ trunk_vlans | split(",") }}
  vrf {{ vrf }}
  {{ var1 | set("my_value1") }}
{{ var2 | set("my_value2") }}
{{ var3 | set("my_value3") }} {{ var4 | set("my_value4") }}
{{ var5 | set("my_var") }}
!{{_end_}} 
</group>

<output name="test1-10"
functions="is_equal"
description="test variables let function"
load="json"
>
{
    "interfaces_with_set": [
        {
            "description": "Management",
            "interface": "Vlan777",
            "var1": "my_value1",
            "var2": "my_value2",
            "var3": "my_value3",
            "var4": "my_value4",
            "var5": "L2VC",
            "vrf": "MGMT"
        },
        {
            "description": "Management",
            "interface": "Vlan778",
            "mode": "trunk",
            "trunk_vlans": [
                "23",
                "24",
                "37"
            ],
            "var1": "my_value1",
            "var2": "my_value2",
            "var3": "my_value3",
            "var4": "my_value4",
            "var5": "L2VC",
            "vlans_trunk": "1-4096",
            "vrf": "MGMT"
        }
    ]
}
</output>


<input name="test1-11" load="text">
-------------------------
Device ID: switch-2.lab.com
Interface: GigabitEthernet4/6,  Port ID (outgoing port): GigabitEthernet1/5

-------------------------
Device ID: switch-1.lab.com
Interface: GigabitEthernet1/1,  Port ID (outgoing port): GigabitEthernet0/1
</input>

<group name="cdp_test_item" input="test1-11" output="test1-11">
Device ID: {{ peer_hostname | split('.') | item(0) }} 
Interface: {{ Interface | item(-40) }},  Port ID (outgoing port): {{ peer_interface | item(40) }}
</group>

<output name="test1-11"
functions="is_equal"
description="test variables 'item' function"
load="json"
>
{
    "cdp_test_item": [
        {
            "Interface": "G",
            "peer_hostname": "switch-2",
            "peer_interface": "5"
        },
        {
            "Interface": "G",
            "peer_hostname": "switch-1",
            "peer_interface": "1"
        }
    ]
}
</output>

<doc>this group tests case when we have multiple regexes matched same line, the logic tested is that 
match for current self.record path will be selected as the correct one. In addition joinmatches are tested to join
lists as results</doc>
<input name="test1-12" load="text">
VRF SOMEVRF (VRF Id = 4); default RD 65100:24;
  Old CLI format, supports IPv4 only
  Flags: 0xC
  Interfaces:
    Te0/3/0.401              Te0/3/0.302              Te0/3/0.315             
    Te0/3/0.316              Te0/3/0.327              Te0/3/0.371             
    Te0/3/0.373              Te0/3/0.15               Te0/3/0.551             
    Te0/3/0.552              Te0/3/0.2527             Te0/3/0.711             
    Te0/3/0.500              Te0/3/0.325              Te0/3/0.324   
    Te0/3/0.32787 
Address family ipv4 unicast (Table ID = 0x4):
  Flags: 0x0
  Export VPN route-target communities
    RT:65100:24              
  Import VPN route-target communities
    RT:65100:24               RT:65100:7544             RT:65101:17
    RT:65101:31546            RT:65100:89900            RT:65100:650
    RT:65100:89564            RT:65100:89611           
  No import route-map
  No global export route-map
  No export route-map
  Route limit 4000, warning limit 80% (3200), current count 1609
  VRF label distribution protocol: not configured
  VRF label allocation mode: per-prefix
</input>

<group name="vrf.{{ vrf_name }}" input="test1-12" output="test1-12"> 
VRF {{ vrf_name }} (VRF Id = {{ vrf_id}}); default RD {{ vrf_rd }};
<group name="interfaces">
  Interfaces: {{ _start_ }}
    {{ interfaces | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ interfaces | joinmatches(",") | split(',') }}
</group>
<group name="afis.{{ afi }}">
Address family {{ afi }} unicast (Table ID = {{ ignore }}):
<group name="export_rt">
  Export VPN route-target communities {{ _start_ }}
    {{ export_rt | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ export_rt | joinmatches(",") | split(',') }}
</group>
<group name="import_rt">
  Import VPN route-target communities {{ _start_ }}
    {{ import_rt | joinmatches(",") | ROW | resub(" +", ",", 5) | split(',') }}
    {{ import_rt | joinmatches(",") | split(',') }}
</group>
  Import route-map: {{ import_route_map | default(None) }}
  Export route-map: {{ export_route_map | default(None) }}
  Route limit {{ route_limit }}, warning limit {{ route_limit_warning }}% (3200), current count {{ routes_count }}
  VRF label distribution protocol: {{ label_dist_proto | ORPHRASE }}
  VRF label allocation mode: {{ label_alloc_mode }}
</group>
</group>

<output name="test1-12"
functions="is_equal"
description="test ROW regex, multiple matches, joinmatches"
load="json"
>
{
    "vrf": {
        "SOMEVRF": {
            "afis": {
                "ipv4": {
                    "export_route_map": null,
                    "export_rt": {
                        "export_rt": [
                            "RT:65100:24"
                        ]
                    },
                    "import_route_map": null,
                    "import_rt": {
                        "import_rt": [
                            "RT:65100:24",
                            "RT:65100:7544",
                            "RT:65101:17",
                            "RT:65101:31546",
                            "RT:65100:89900",
                            "RT:65100:650",
                            "RT:65100:89564",
                            "RT:65100:89611"
                        ]
                    },
                    "label_alloc_mode": "per-prefix",
                    "label_dist_proto": "not configured",
                    "route_limit": "4000",
                    "route_limit_warning": "80",
                    "routes_count": "1609"
                }
            },
            "interfaces": {
                "interfaces": [
                    "Te0/3/0.401",
                    "Te0/3/0.302",
                    "Te0/3/0.315",
                    "Te0/3/0.316",
                    "Te0/3/0.327",
                    "Te0/3/0.371",
                    "Te0/3/0.373",
                    "Te0/3/0.15",
                    "Te0/3/0.551",
                    "Te0/3/0.552",
                    "Te0/3/0.2527",
                    "Te0/3/0.711",
                    "Te0/3/0.500",
                    "Te0/3/0.325",
                    "Te0/3/0.324",
                    "Te0/3/0.32787"
                ]
            },
            "vrf_id": "4",
            "vrf_rd": "65100:24"
        }
    }
}
</output>



<input load="text" name="test1-13">
interface Vlan777
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan778
  description Management
  ip address 192.168.0.1/24
  vrf MGMT
!
interface Vlan779
  ip address 192.168.0.1/24
  vrf MGMT
!
</input>
<macro>
def check(data):
    if data == "Vlan779":
        return data + "1000"
</macro>
<macro>
def check2(data):
    if "778" in data:
        return {"data": data, "key_vlan": True, "field2": 5678}
</macro>
<group name="interfaces_macro" default="None" input="test1-13" output="test1-13">
interface {{ interface | macro("check") | macro("check2")}}
  description {{ description }}
  ip address {{ ip }}/{{ mask }}
  vrf {{ vrf }}
!{{_end_}}
</group>
<output name="test1-13"
functions="is_equal"
description="test match variable macro function"
load="json"
>
{
"interfaces_macro":[
{
    "description": "Management",
    "interface": "Vlan777",
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
},
{
    "description": "Management",
    "interface": {
        "data": "Vlan778",
        "field2": 5678,
        "key_vlan": true
    },
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
},
{
    "description": "None",
    "interface": "Vlan7791000",
    "ip": "192.168.0.1",
    "mask": "24",
    "vrf": "MGMT"
}
]
}
</output>



<input load="text" name="test1-14">
interface Vlan123
 description Desks vlan
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
 ip address 192.168.222.1 255.255.255.0
!
interface Loopback0
 description Routing ID loopback
!
</input>

 <macro>
def check_if_svi(data):
    if "Vlan" in data:
        return data, {"is_svi": True}
    else:
       return data, {"is_svi": False}
        
def check_if_loop(data):
    if "Loopback" in data:
        return data, {"is_loop": True}
    else:
       return data, {"is_loop": False}
 </macro>
 
 <macro>
def description_mod(data):
    # To revert words order in descripotion
    words_list = data.split(" ")
    words_list_reversed = list(reversed(words_list))
    words_reversed = " ".join(words_list_reversed) 
    return words_reversed
 </macro>
 
<group name="interfaces_macro_more" input="test1-14" output="test1-14">
interface {{ interface | macro("check_if_svi") | macro("check_if_loop") }}
 description {{ description | ORPHRASE | macro("description_mod")}}
 ip address {{ ip }} {{ mask }}
</group>

<output name="test1-14"
functions="is_equal"
description="test more match variable macro functions"
load="json"
>
{
     "interfaces_macro_more": [
         {
             "description": "vlan Desks",
             "interface": "Vlan123",
             "ip": "192.168.123.1",
             "is_loop": false,
             "is_svi": true,
             "mask": "255.255.255.0"
         },
         {
             "description": "core-1 to",
             "interface": "GigabitEthernet1/1",
             "is_loop": false,
             "is_svi": false
         },
         {
             "description": "vlan Phones",
             "interface": "Vlan222",
             "ip": "192.168.222.1",
             "is_loop": false,
             "is_svi": true,
             "mask": "255.255.255.0"
         },
         {
             "description": "loopback ID Routing",
             "interface": "Loopback0",
             "is_loop": true,
             "is_svi": false
         }
     ]
 }
 </output>
 
 
<input load="text" name="test1-15">
router bgp 65100
  neighbor 10.145.1.9
    remote-as 65101
  !
  neighbor 192.168.101.1
    remote-as 65102
</input>

<lookup name="ASNs" load="csv">
ASN,as_name,as_description
65101,Customer_1,Private ASN for CN451275
65102,CPEs,Private ASN for FTTB CPEs
</lookup>

<group name="bgp_config" input="test1-15" output="test1-15">
router bgp {{ bgp_as }}
 <group name="peers">
  neighbor {{ peer }}
    remote-as {{ remote_as | lookup('ASNs', add_field='asn_details') }}
 </group>
</group>   

<output name="test1-15"
functions="is_equal"
description="test csv lookup"
load="json"
>
{
    "bgp_config": {
        "bgp_as": "65100",
        "peers": [
            {
                "asn_details": {
                    "as_description": "Private ASN for CN451275",
                    "as_name": "Customer_1"
                },
                "peer": "10.145.1.9",
                "remote_as": "65101"
            },
            {
                "asn_details": {
                    "as_description": "Private ASN for FTTB CPEs",
                    "as_name": "CPEs"
                },
                "peer": "192.168.101.1",
                "remote_as": "65102"
            }
        ]
    }
}
</output>



<input load="text" name="test1-16">
interface Vlan123
 ip address 192.168.123.1 255.255.255.0
!
interface GigabitEthernet1/1
 description to core-1
!
interface Vlan222
 description Phones vlan
!
interface Loopback0
 description Routing ID loopback
!
</input>

<lookup name="AUX" load="ini">
[interfaces]
Vlan222 : add value to result
</lookup>

<group name="interfaces_ini_rlookup" input="test1-16" output="test1-16">
interface {{ interface | rlookup("AUX.interfaces", "looked_up_data")}}
 description {{ description | ORPHRASE }}
 ip address {{ ip }} {{ mask }}
</group>

<output name="test1-16"
functions="is_equal"
description="test ini rlookup"
load="json"
>
{
    "interfaces_ini_rlookup": [
        {
            "interface": "Vlan123",
            "ip": "192.168.123.1",
            "mask": "255.255.255.0"
        },
        {
            "description": "to core-1",
            "interface": "GigabitEthernet1/1"
        },
        {
            "description": "Phones vlan",
            "interface": "Vlan222",
            "looked_up_data": "add value to result"
        },
        {
            "description": "Routing ID loopback",
            "interface": "Loopback0"
        }
    ]
}
</output>




<input load="text" name="test1-17">
interface GigabitEthernet1/1
 description to core-1
 ip address 192.168.123.1 255.255.255.0
!
interface Vlan222
 description Phones vlan
!
interface Loopback0
 description Routing ID loopback
 ip address 192.168.222.1 255.255.255.0
!
</input>

<macro>
def check_if_svi_group(data):
    if "Vlan" in data["interface"]:
        data["is_svi"] = True
    else:
        data["is_svi"] = False
    return data
        
def check_if_loop_group(data):
    if "Loopback" in data["interface"]:
        data["is_loop"] = True
    else:
        data["is_loop"] = False
    return data
</macro>
 
 <macro>
def description_mod_group(data):
    # To revert words order in descripotion
    words_list = data.get("description", "").split(" ")
    words_list_reversed = list(reversed(words_list))
    words_reversed = " ".join(words_list_reversed) 
    data["description"] = words_reversed
    return data
 </macro>
 
<group name="interfaces_functions_test" 
functions="contains('ip') | macro('description_mod_group') | macro('check_if_svi_group') | macro('check_if_loop_group')"
input="test1-17"
output="test1-17"
>
interface {{ interface }}
 description {{ description | ORPHRASE }}
 ip address {{ ip }} {{ mask }}
</group>

<output name="test1-17"
description="test group functions attribute"
functions="is_equal"
load="json"
>
{
    "interfaces_functions_test": [
        {
            "description": "core-1 to",
            "interface": "GigabitEthernet1/1",
            "ip": "192.168.123.1",
            "is_loop": false,
            "is_svi": false,
            "mask": "255.255.255.0"
        },
        {
            "description": "loopback ID Routing",
            "interface": "Loopback0",
            "ip": "192.168.222.1",
            "is_loop": true,
            "is_svi": false,
            "mask": "255.255.255.0"
        }
    ]
}
</output>



<input load="text" name="test1-18">
interface GigabitEthernet1/1
 description to core-1
 ip address 192.168.123.1 255.255.255.0
!
</input> 
<group name="interfaces_functions_test1_18" 
input="test1-18"
output="test1-18"
>
interface {{ interface }}
 description {{ description | ORPHRASE | split(" ") | to_list }}
 ip address {{ ip | to_list }} {{ mask }}
</group>

<output name="test1-18"
description="test to_list match variable functions"
functions="is_equal"
load="json"
>
{
    "interfaces_functions_test1_18": {
        "description": [[
            "to",
            "core-1"
        ]],
        "interface": "GigabitEthernet1/1",
        "ip": [
            "192.168.123.1"
        ],
        "mask": "255.255.255.0"
    }
}
</output>


<input load="text" name="test1-19">
interface Loopback0
 ip address 1.0.0.3 255.255.255.0
!
interface Vlan777
 ip address 192.168.0.1/24
!
</input>

<group name="interfaces_ip_test1_19" input="test1-19" output="test1-19">
interface {{ interface }}
 ip address {{ ip | PHRASE | to_ip | with_prefixlen }}
 ip address {{ ip | to_ip | with_netmask }}
</group>
 
<output name="test1-19"
description="test ipaddress with_prefixlen and with_netmask"
functions="is_equal"
load="json"
>
{
    "interfaces_ip_test1_19": [
        {
            "interface": "Loopback0",
            "ip": "1.0.0.3/24"
        },
        {
            "interface": "Vlan777",
            "ip": "192.168.0.1/255.255.255.0"
        }
    ]
}
</output>



<input load="text" name="test1-20">
RP/0/0/CPU0:XR4#show route
i L2 10.0.0.2/32 [115/20] via 10.0.0.2, 00:41:40, tunnel-te100
i L2 172.16.0.3/32 [115/10] via 10.1.34.3, 00:45:11, GigabitEthernet0/0/0/0.34
i L2 1.1.23.0/24 [115/20] via 10.1.34.3, 00:45:11, GigabitEthernet0/0/0/0.34
</input>

<group name="routes_test1_20" input="test1-20" output="test1-20">
{{ code }} {{ subcode }} {{ net | to_net | is_private | to_str }} [{{ ad }}/{{ metric }}] via {{ nh_ip }}, {{ age }}, {{ nh_interface }}
</group>

<output name="test1-20"
description="test ipaddress to_net and is_private funcs"
functions="is_equal"
load="json"
>
{
    "routes_test1_20": [
        {
            "ad": "115",
            "age": "00:41:40",
            "code": "i",
            "metric": "20",
            "net": "10.0.0.2/32",
            "nh_interface": "tunnel-te100",
            "nh_ip": "10.0.0.2",
            "subcode": "L2"
        },
        {
            "ad": "115",
            "age": "00:45:11",
            "code": "i",
            "metric": "10",
            "net": "172.16.0.3/32",
            "nh_interface": "GigabitEthernet0/0/0/0.34",
            "nh_ip": "10.1.34.3",
            "subcode": "L2"
        }
    ]
}
</output>


<input load="text" name="test1-21">
interface Loopback0
 ip address 1.0.0.3 255.255.255.0
!
interface Vlan777
 ip address 192.168.0.1/24
!
interface Vlan777
 ip address fe80::fd37/124
!
</input>

<group name="interfaces_test1_21" input="test1-21" output="test1-21">
interface {{ interface }}
 ip address {{ ip | to_ip | ip_info }} {{ mask }}
 ip address {{ ip | to_ip | ip_info }}
</group>

<output name="test1-21"
description="test ipaddress ip_info function test"
functions="is_equal"
load="json"
>
{
    "interfaces_test1_21": [
        {
            "interface": "Loopback0",
            "ip": {
                "compressed": "1.0.0.3",
                "exploded": "1.0.0.3",
                "ip": "1.0.0.3",
                "is_link_local": false,
                "is_loopback": false,
                "is_multicast": false,
                "is_private": false,
                "is_reserved": false,
                "is_unspecified": false,
                "max_prefixlen": 32,
                "version": 4
            },
            "mask": "255.255.255.0"
        },
        {
            "interface": "Vlan777",
            "ip": {
                "broadcast_address": "192.168.0.255",
                "compressed": "192.168.0.1/24",
                "exploded": "192.168.0.1/24",
                "hostmask": "0.0.0.255",
                "hosts": 254,
                "ip": "192.168.0.1",
                "is_link_local": false,
                "is_loopback": false,
                "is_multicast": false,
                "is_private": true,
                "is_reserved": false,
                "is_unspecified": false,
                "max_prefixlen": 32,
                "netmask": "255.255.255.0",
                "network": "192.168.0.0/24",
                "network_address": "192.168.0.0",
                "num_addresses": 256,
                "prefixlen": 24,
                "version": 4,
                "with_hostmask": "192.168.0.1/0.0.0.255",
                "with_netmask": "192.168.0.1/255.255.255.0",
                "with_prefixlen": "192.168.0.1/24"
            }
        },
        {
            "interface": "Vlan777",
            "ip": {
                "broadcast_address": "fe80::fd3f",
                "compressed": "fe80::fd37/124",
                "exploded": "fe80:0000:0000:0000:0000:0000:0000:fd37/124",
                "hostmask": "::f",
                "hosts": 14,
                "ip": "fe80::fd37",
                "is_link_local": true,
                "is_loopback": false,
                "is_multicast": false,
                "is_private": true,
                "is_reserved": false,
                "is_unspecified": false,
                "max_prefixlen": 128,
                "netmask": "ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0",
                "network": "fe80::fd30/124",
                "network_address": "fe80::fd30",
                "num_addresses": 16,
                "prefixlen": 124,
                "version": 6,
                "with_hostmask": "fe80::fd37/::f",
                "with_netmask": "fe80::fd37/ffff:ffff:ffff:ffff:ffff:ffff:ffff:fff0",
                "with_prefixlen": "fe80::fd37/124"
            }
        }
    ]
}
</output>



<input load="text" name="test1-22">
interface Loopback0
 ip address 192.168.0.113/24
!
interface Loopback1
 ip address 192.168.1.341/24
!
</input>

<group name="interfaces_test1_22" input="test1-22" output="test1-22">
interface {{ interface }}
 ip address {{ ip | is_ip }}
</group>

<output name="test1-22"
description="test ipaddress is_ip function"
functions="is_equal"
load="json"
>
{
    "interfaces_test1_22": [
        {
            "interface": "Loopback0",
            "ip": "192.168.0.113/24"
        },
        {
            "interface": "Loopback1"
        }
    ]
}
</output>


<input load="text" name="test1-23">
interface Loopback0
 ip address 192.168.0.113/24
!
interface Loopback1
 ip address 192.168.1.341/24
!
interface Loopback1
 ip address 10.0.1.251/24
!
</input>

<group name="interfaces_test1_23" input="test1-23" output="test1-23">
interface {{ interface }}
 ip address {{ ip | cidr_match("192.168.0.0/16") }}
</group>

<output name="test1-23"
description="test ipaddress cidr_match function"
functions="is_equal"
load="json"
>
{
    "interfaces_test1_23": [
        {
            "interface": "Loopback0",
            "ip": "192.168.0.113/24"
        },
        {
            "interface": "Loopback1",
            "ip": "192.168.1.341/24"
        },
        {
            "interface": "Loopback1"
        }
    ]
}
</output>



<input load="text" name="test1-24">
interface Loopback0
 description Management
 ip address 192.168.0.113/24
!
</input>

<group name="interfaces_test1_24" input="test1-24" output="test1-24">
interface {{ interface }}
 description {{ description | let("description_undefined") }}
 ip address {{ ip | contains("24") | let("netmask", "255.255.255.0") }}
</group>

<output name="test1-24"
description="test let function"
functions="is_equal"
load="json"
>
{
    "interfaces_test1_24": {
        "description": "description_undefined",
        "interface": "Loopback0",
        "ip": "192.168.0.113/24",
        "netmask": "255.255.255.0"
    }
}
</output>



<input load="text" name="test1-25">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 switchport trunk allowed vlan add 400,401,410
</input>

<vars>
vlans_test_1_25 = [
   "unrange(rangechar='-', joinchar=',')",
   "split(',')",
   "join(':')",
   "joinmatches(':')"
]
</vars>

<group name="interfaces_test_1_25" input="test1-25" output="test1-25">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans | chain('vlans_test_1_25') }}
</group>

<output name="test1-25"
description="test chain function - list"
functions="is_equal"
load="json"
>
{
    "interfaces_test_1_25": {
        "interface": "GigabitEthernet3/3",
        "trunk_vlans": "138:166:167:168:169:170:171:172:173:400:401:410"
    }
}
</output>




<input load="text" name="test1-26">
Protocol  Address     Age (min)  Hardware Addr   Type   Interface
Internet  10.12.13.1        98   0950.5785.5cd1  ARPA   FastEthernet2.13
Internet  10.12.13.3       131   0150.7685.14d5  ARPA   GigabitEthernet2.13
Internet  10.12.13.4       198   0950.5C8A.5c41  ARPA   GigabitEthernet2.17
</input>

<vars>
GE_INTF = r"GigabitEthernet\S+"
</vars>

<group name="arp_test_1_26" input="test1-26" output="test1-26">
Internet  {{ ip | re("IP")}}  {{ age | re(r"\d+") }}   {{ mac }}  ARPA   {{ interface | re("GE_INTF") }}
</group>

<output name="test1-26"
description="test re regex formatter"
functions="is_equal"
load="json"
>
{
    "arp_test_1_26": [
        {
            "age": "131",
            "interface": "GigabitEthernet2.13",
            "ip": "10.12.13.3",
            "mac": "0150.7685.14d5"
        },
        {
            "age": "198",
            "interface": "GigabitEthernet2.17",
            "ip": "10.12.13.4",
            "mac": "0950.5C8A.5c41"
        }
    ]
}
</output>




<input load="text" name="test1-27">
interface GigabitEthernet1/1
 description to core-1
 ip address 192.168.123.1 255.255.255.0
!
interface Vlan222
 description Phones vlan
!
interface Loopback0
 description Routing ID loopback
 ip address 192.168.222.1 255.255.255.0
!
</input>

<macro>
def check_if_svi_test_1_27(data):
    if "Vlan" in data["interface"]:
        data["is_svi"] = True
    else:
        data["is_svi"] = False
    return data
        
def check_if_loop_test_1_27(data):
    if "Loopback" in data["interface"]:
        data["is_loop"] = True
    else:
        data["is_loop"] = False
    return data
</macro>
 
<macro>
def description_mod_test_1_27(data):
    # To revert words order in description
    words_list = data.get("description", "").split(" ")
    words_list_reversed = list(reversed(words_list))
    words_reversed = " ".join(words_list_reversed) 
    data["description"] = words_reversed
    return data
</macro>
 
<group name="interfaces_macro_test_1_27" 
functions="contains('ip') | macro('description_mod_test_1_27') | macro('check_if_svi_test_1_27') | macro('check_if_loop_test_1_27')"
input="test1-27" output="test1-27"
>
interface {{ interface }}
 description {{ description | ORPHRASE }}
 ip address {{ ip }} {{ mask }}
</group>


<output name="test1-27"
description="test group contains and group macro"
load="json"
functions="is_equal"
>
   {
        "interfaces_macro_test_1_27": [
            {
                "description": "core-1 to",
                "interface": "GigabitEthernet1/1",
                "ip": "192.168.123.1",
                "is_loop": false,
                "is_svi": false,
                "mask": "255.255.255.0"
            },
            {
                "description": "loopback ID Routing",
                "interface": "Loopback0",
                "ip": "192.168.222.1",
                "is_loop": true,
                "is_svi": false,
                "mask": "255.255.255.0"
            }
        ]
    }
</output>




<input load="text" name="test1-28">
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
</input>

<group name="interfaces_test_1_28" exclude="ip, description" input="test1-28" output="test1-28">
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
</group>

<output name="test1-28"
description="test group exclude function"
load="json"
functions="is_equal"
>
    {
        "interfaces_test_1_28": {
            "interface": "Vlan780",
            "sec_mac": "4"
        }
    }
</output>



<input load="text" name="test1-29">
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
</input>

<group name="interfaces_test_1_29" excludeall="ip, description" input="test1-29" output="test1-29">
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
</group>

<output name="test1-29"
description="test group excludeall function"
load="json"
functions="is_equal"
>
    {
        "interfaces_test_1_29": [
            {
                "description": "some description 2",
                "interface": "Vlan779"
            },
            {
                "interface": "Vlan780",
                "sec_mac": "4"
            }
        ]
    }
</output>



<input load="text" name="test1-30">
*Virtual Server : C-AUTH.COM-NGINX-EXT 199.85.76.109   All Up
    +port 80  http ====>C-AUTH.COM-NGINX-EXT-HTTP	State :All Up
	+CAUTH-NGINX:80                 10.151.16.77         State : Up
    +port 443  tcp ====>C-AUTH.COM-NGINX-EXT-HTTPS	State :All Up
	+CAUTH-NGINX:443                10.151.16.77         State : Up
</input>

<group name="virtual-servers-test1-30*" input="test1-30" output="test1-30">
*Virtual Server : {{ name }} {{ ip }} {{ portion }} {{ state }}
<group name="slb-servers*">
    +port {{ port_no }} {{ protocol }} ====>{{ internal_service_name }}	State :{{ internal_portion }} {{ internal_status }}
	+{{internal_server_name}}:{{ internal_port }}                 {{ internal_server_ip }}         State : {{ internal_server_state }}
</group>
</group>

<output
name="test1-30"
load="json"
functions="is_equal"
description="test leading tab charachter indentation"
>
    {
        "virtual-servers-test1-30": [
            {
                "ip": "199.85.76.109",
                "name": "C-AUTH.COM-NGINX-EXT",
                "portion": "All",
                "slb-servers": [
                    {
                        "internal_port": "80",
                        "internal_portion": "All",
                        "internal_server_ip": "10.151.16.77",
                        "internal_server_name": "CAUTH-NGINX",
                        "internal_server_state": "Up",
                        "internal_service_name": "C-AUTH.COM-NGINX-EXT-HTTP",
                        "internal_status": "Up",
                        "port_no": "80",
                        "protocol": "http"
                    },
                    {
                        "internal_port": "443",
                        "internal_portion": "All",
                        "internal_server_ip": "10.151.16.77",
                        "internal_server_name": "CAUTH-NGINX",
                        "internal_server_state": "Up",
                        "internal_service_name": "C-AUTH.COM-NGINX-EXT-HTTPS",
                        "internal_status": "Up",
                        "port_no": "443",
                        "protocol": "tcp"
                    }
                ],
                "state": "Up"
            }
        ]
    }
</output>



<input load="text" name="test1-31">
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
</input>

<group name="interfaces-test1-31" del="description, ip" input="test1-31" output="test1-31">
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
</group>

<output
name="test1-31"
load="json"
functions="is_equal"
description="test group 'del' - delete - function"
>
    {
        "interfaces-test1-31": [
            {
                "interface": "Vlan778",
                "mask": "124"
            },
            {
                "interface": "Vlan779"
            },
            {
                "interface": "Vlan780",
                "sec_mac": "4"
            }
        ]
    }
</output>



<input load="text" name="test1-32">
device-hostame uptime is 2 years, 5 months, 27 weeks, 3 days, 10 hours, 46 minutes
device-hostame uptime is 27 weeks, 3 days, 10 hours, 46 minutes
device-hostame uptime is 10 hours, 46 minutes
device-hostame uptime is 1 minutes
device-hostame uptime is 2535643125 times
</input>

<group name="uptime-1" input="test1-32" output="test1-32-1">
device-hostame uptime is {{ uptime | PHRASE | uptimeparse }}
</group>

<group name="uptime-2" input="test1-32" output="test1-32-2">
device-hostame uptime is {{ uptime | PHRASE | uptimeparse(format="dict") }}
</group>

<output
name="test1-32-1"
load="json"
functions="is_equal"
description="test match uptimeparse function, format=seconds"
>
    {
        "uptime-1": [
            {
                "uptime": 92659560
            },
            {
                "uptime": 16627560
            },
            {
                "uptime": 38760
            },
            {
                "uptime": 60
            },
            {
                "uptime": "2535643125 times"
            }
        ]
    }
</output>

<output
name="test1-32-2"
load="json"
functions="is_equal"
description="test match uptimeparse function, format=dict"
>
    {
        "uptime-2": [
            {
                "uptime": {
                    "days": "3",
                    "hours": "10",
                    "mins": "46",
                    "months": "5",
                    "weeks": "27",
                    "years": "2"
                }
            },
            {
                "uptime": {
                    "days": "3",
                    "hours": "10",
                    "mins": "46",
                    "weeks": "27"
                }
            },
            {
                "uptime": {
                    "hours": "10",
                    "mins": "46"
                }
            },
            {
                "uptime": {
                    "mins": "1"
                }
            },
            {
                "uptime": "2535643125 times"
            }
		]
    }
</output>



<input load="text" name="test1-33">
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Loopback0
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
</input>

<group name="interfaces-test1-33" del="description, ip" input="test1-33" output="test1-33">
interface {{ interface | contains("Vlan") }}
 ip address {{ ip }}/{{ mask }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
</group>

<output
name="test1-33"
load="json"
functions="is_equal"
description="test group filtering based on start re contains"
>
    {
        "interfaces-test1-33": [
            {
                "interface": "Vlan778",
                "mask": "124"
            },
            {
                "interface": "Vlan780",
                "sec_mac": "4"
            }
        ]
    }
</output>



<input load="text" name="test1-34">
GigabitEthernet2 is up, line protocol is up
  Hardware is CSR vNIC, address is 0800.2779.e896 (bia 08-00-27-79-e8-96)
</input>

<group name="interface-test1-34" input="test1-34" output="test1-34">
{{ interface }} is up, line protocol is up
  Hardware is CSR vNIC, address is {{ mac | mac_eui }} (bia {{ bia_mac | mac_eui}})
</group>

<output 
name="test1-34"
load="json"
functions="is_equal"
description="test mac_eui function"
>
{
    "interface-test1-34": {
        "bia_mac": "08:00:27:79:e8:96",
        "interface": "GigabitEthernet2",
        "mac": "08:00:27:79:e8:96"
    }
}
</output>



<input name="test1-35" load="text" extract_commands="show interfaces">
cpe1#show interfaces status
GigabitEthernet33 is up, line protocol is up
  Hardware is CSR vNIC, address is 0800.2779.9993 (bia 0800.2779.9993)
cpe1#show interfaces
GigabitEthernet2 is up, line protocol is up
  Hardware is CSR vNIC, address is 0800.2779.e896 (bia 0800.2779.e896)
cpe1#show int
GigabitEthernet34 is up, line protocol is up
  Hardware is CSR vNIC, address is 0800.2779.9999 (bia 0800.2779.9999)
</input>

<group name="interfaces_test1_35" input="test1-35" output="test1-35">
{{ interface }} is up, line protocol is up
  Hardware is CSR vNIC, address is {{ mac | mac_eui }} (bia {{ bia_mac }})
</group>

<output
name="test1-35"
load="json"
functions="is_equal"
description="test input extract_commands function"
>
{
    "interfaces_test1_35": {
        "bia_mac": "0800.2779.e896",
        "interface": "GigabitEthernet2",
        "mac": "08:00:27:79:e8:96"
    }
}
</output>




<input name="test1-36" load="text" extract_commands="show run interfaces">
cpe1#show interfaces
interface Vlan779
 ip address 2002:fd37::79/124
cpe1#show run interfaces
interface Vlan778
 ip address 2002:fd37::91/124
</input>

<group name="interfaces_test1_36" input="test1-36" output="test1-36">
interface {{ interface }}
 ip address {{ ip }}
</group>

<output
name="test1-36"
load="json"
functions="is_equal"
description="test input extract_commands function one more time"
>
{
    "interfaces_test1_36": {
        "interface": "Vlan778",
        "ip": "2002:fd37::91/124"
    }
}
</output>





<input name="test1-37" load="text">
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 vrf forwarding Management
 ipv6 address 2002:fd37::91/124
!
interface GigabitEthernet1/3.321
 description Customer #151678
 encapsulation dot1q 321
 vrf forwarding Voice
 ip address 172.16.32.10 255.255.255.128
!
interface Vlan779
 description South Bank Customer #78295
 vrf forwarding Data
 ip address 192.168.23.53 255.255.255.0
!
interface TenGigabitEthernet3/1.298
 description PDSENS Customer #783290
 encapsulation dot1q 298
 vrf forwarding Data
 ipv6 address 2001:ad56::1273/64
!
</input>

<vars>
my_schema = {
    "interface": {
        "regex": ".*Gigabit.*"
    },
    "vrf": {
        "allowed": ["Data", "Management"]
    },
    "description": {
        "regex": ".*Customer.*"
    },
    "vid": {
        "min": 200, 
        "max": 300
    }
}
</vars>

<group name="test1_37_filtered_interfaces*" cerberus="schema=my_schema, add_errors=True" input="test1-37" output="test1-37">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 encapsulation dot1q {{ vid | to_int }}
 vrf forwarding {{ vrf }}
 ip address {[ ip }} {{ mask }}
 ipv6 address {{ ipv6 }}/{{ maskv6 }} 
</group>

<output
name="test1-37"
load="json"
functions="is_equal"
description="test group Cerberus validation function"
>
{
    "test1_37_filtered_interfaces": [
        {
            "description": "Customer #32148",
            "interface": "GigabitEthernet1/3.251",
            "ipv6": "2002:fd37::91",
            "maskv6": "124",
            "vid": 251,
            "vrf": "Management"
        },
        {
            "description": "Customer #151678",
            "interface": "GigabitEthernet1/3.321",
            "validation_errors": {
                "vid": [
                    "max value is 300"
                ],
                "vrf": [
                    "unallowed value Voice"
                ]
            },
            "vid": 321,
            "vrf": "Voice"
        },
        {
            "description": "South Bank Customer #78295",
            "interface": "Vlan779",
            "validation_errors": {
                "interface": [
                    "value does not match regex '.*Gigabit.*'"
                ]
            },
            "vrf": "Data"
        },
        {
            "description": "PDSENS Customer #783290",
            "interface": "TenGigabitEthernet3/1.298",
            "ipv6": "2001:ad56::1273",
            "maskv6": "64",
            "vid": 298,
            "vrf": "Data"
        }
    ]
}
</output>


<input name="test1-38" load="text">
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 vrf forwarding Management
 ipv6 address 2002:fd37::91/124
!
interface TenGigabitEthernet1/3.321
 description Customer #151678
 encapsulation dot1q 321
 vrf forwarding Voice
 ip address 172.16.32.10 255.255.255.128
!
</input>

<group name="test1-38-no_vids" input="test1-38" output="test1-38">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 encapsulation dot1q {{ vid | void }}
<group name="ips" void="">
 ip address {{ ip }} {{ mask }}
</group>
</group>

<output
name="test1-38"
load="json"
functions="is_equal"
description="test group and match variable 'void' functions"
>
{
    "test1-38-no_vids": [
        {
            "description": "Customer #32148",
            "interface": "GigabitEthernet1/3.251"
        },
        {
            "description": "Customer #151678",
            "interface": "TenGigabitEthernet1/3.321"
        }
    ]
}
</output>



<input load="text" name="test1-39">
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
!
</input>


<group name="interfaces-test1-39" input="test1-39" output="test1-39">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 encapsulation dot1q {{ vid | to_float }}
 ip address {{ ip | to_unicode }} {{ mask }}
</group>

<output
name="test1-39"
load="json"
functions="is_equal"
description="test match variable to_float and to_unicode functions"
>
{
    "interfaces-test1-39": {
        "description": "Customer #32148",
        "interface": "GigabitEthernet1/3.251",
        "ip": "172.16.33.10",
        "mask": "255.255.255.128",
        "vid": 251.0
    }
}
</output>



<input load="text" name="test1-40">
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
!
</input>

<group name="interfaces-test1-40" input="test1-40" output="test1-40" str_to_unicode="">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 encapsulation dot1q {{ vid | to_float }}
 ip address {{ ip }} {{ mask }}
</group>

<output
name="test1-40"
load="python"
functions="is_equal"
description="test group str_to_unicode function"
>
{   'interfaces-test1-40': {   'description': u'Customer #32148',
                              'interface': u'GigabitEthernet1/3.251',
                              'ip': u'172.16.33.10',
                              'mask': u'255.255.255.128',
                              'vid': 251.0}}
</output>



<input load="text" name="test1-41">
interface GigabitEthernet1/3.251
 description Customer #32148
 encapsulation dot1q 251
 ip address 172.16.33.10 255.255.255.128
!
</input>

<group name="interfaces-test1-41" input="test1-41" output="test1-41" equal="description, 'Customer #32148'">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 encapsulation dot1q {{ vid }}
 ip address {{ ip }} {{ mask }}
</group>

<output
name="test1-41"
load="python"
functions="is_equal"
description="test group equal function"
>
{   'interfaces-test1-41': {  'description': 'Customer #32148',
                              'interface': 'GigabitEthernet1/3.251',
                              'ip': '172.16.33.10',
                              'mask': '255.255.255.128',
                              'vid': '251'}}
</output>




<input load="text" name="test1-42">
Subscription ID = 1
Version = 1
Num Subpackets = 1
Subpacket[0]
   Subpacket ID = PDCP PDU with Ciphering (0xC3)
   Subpacket Version = 26.1
   Subpacket Size = 60,5 bytes
   SRB Cipher Algo = LTE AES
   DRB Cipher Algo = LTE AES
   Num PDUs = 1
</input>

<group name="test_1_42_1" to_int="" input="test1-42" output="test1-42-1">
Subscription ID = {{ Subscription_ID }}
Version = {{ version }}
Num Subpackets = {{ Num_Subpackets }}
   Subpacket ID = {{ Subpacket_ID | PHRASE }}
   Subpacket Version = {{ Subpacket_Version }}
   Subpacket Size = {{ Subpacket_Size | PHRASE }}
   SRB Cipher Algo = {{ SRB_Cipher_Algo | PHRASE }}
   DRB Cipher Algo = {{ DRB_Cipher_Algo | PHRASE }}
   Num PDUs = {{ Num_PDUs }}
</group>

<output
name="test1-42-1"
load="python"
functions="is_equal"
description="test group to_int function for all keys"
>
{   'test_1_42_1': {   'DRB_Cipher_Algo': 'LTE AES',
                     'Num_PDUs': 1,
                     'Num_Subpackets': 1,
                     'SRB_Cipher_Algo': 'LTE AES',
                     'Subpacket_ID': 'PDCP PDU with Ciphering (0xC3)',
                     'Subpacket_Size': '60,5 bytes',
                     'Subpacket_Version': 26.1,
                     'Subscription_ID': 1,
                     'version': 1}}
</output>

<group name="test_1_42_2" to_int="version, Subpacket_Version" input="test1-42" output="test1-42-2">
Subscription ID = {{ Subscription_ID }}
Version = {{ version }}
Num Subpackets = {{ Num_Subpackets }}
   Subpacket ID = {{ Subpacket_ID | PHRASE }}
   Subpacket Version = {{ Subpacket_Version }}
   Subpacket Size = {{ Subpacket_Size | PHRASE }}
   SRB Cipher Algo = {{ SRB_Cipher_Algo | PHRASE }}
   DRB Cipher Algo = {{ DRB_Cipher_Algo | PHRASE }}
   Num PDUs = {{ Num_PDUs }}
</group>

<output
name="test1-42-2"
load="python"
functions="is_equal"
description="test group to_int function for given keys only"
>
{   'test_1_42_2': {   'DRB_Cipher_Algo': 'LTE AES',
                       'Num_PDUs': '1',
                       'Num_Subpackets': '1',
                       'SRB_Cipher_Algo': 'LTE AES',
                       'Subpacket_ID': 'PDCP PDU with Ciphering (0xC3)',
                       'Subpacket_Size': '60,5 bytes',
                       'Subpacket_Version': 26.1,
                       'Subscription_ID': '1',
                       'version': 1}}
</output>



<input name="test1-43" load="text">
/c/slb/real 3
	ena
	ipver v4
	rip 1.1.1.229
	name "vgqa6-01"
/c/slb/group 13
	ipver v4
	backup g14
	add 23
	name "appvip1-tcp"
</input>

<group name="test1-43_nodes" default="" input="test1-43" output="test1-43">
/c/slb/real {{ node_seq | isdigit }}
	{{ config_state }}
	ipver {{ ipver }}
	rip {{ node_ip | is_ip }}
	inter {{ interval }}
	retry {{ retry }}
	name {{ node_name | replace('"','') }}
<group name="node_port*">
	addport {{ node_port | isdigit }}
</group>
</group>

<output
name="test1-43"
load="python"
functions="is_equal"
description="test group variable multiple matches handling to save first match"
>
{
    "test1-43_nodes": {
        "config_state": "ena",
        "interval": "",
        "ipver": "v4",
        "node_ip": "1.1.1.229",
        "node_name": "vgqa6-01",
        "node_seq": "3",
        "retry": ""
    }
}
</output>


<input load="text" name="test1-44">
Protocol  Address     Age (min)  Hardware Addr   Type   Interface
Internet  10.12.13.2        98   0950.5785.5cd1  1   FastEthernet2.13
Internet  10.12.14.3       131   0150.7685.14d5  1   GigabitEthernet2.13
</input>

<group name="test1-44_arp.{{ age }}" to_int="" input="test1-44" output="test1-44">
Internet  {{ ip }}  {{ age | DIGIT }}   {{ mac }}  {{ type }}  {{ interface }}
</group>

<output
name="test1-44"
load="python"
functions="is_equal"
description="test group dynamic path when match converted to int"
>
{
    "test1-44_arp": {
        "131": {
            "interface": "GigabitEthernet2.13",
            "ip": "10.12.14.3",
            "mac": "0150.7685.14d5",
            "type": 1
        },
        "98": {
            "interface": "FastEthernet2.13",
            "ip": "10.12.13.2",
            "mac": "0950.5785.5cd1",
            "type": 1
        }
    }
}
</output>



<input load="text" name="test1-45">
router bgp 65100
 rid 1.1.1.1
 !
 address-family ipv4 vrf vrf_name
  redistribute ospf 321 match internal external 1 external 2 route-map vrf_nameSVRF-OSPF->BGP
</input>

<group name="test1-45_vrf_BGP" input="test1-45" output="test1-45">
router bgp 65100 {{ _start_ }}
<group name="_">
 address-family ipv4 vrf vrf_name {{ _start_ }}
  redistribute ospf 321 match internal external 1 external 2 route-map {{ ospf_to_bgp_redistr_rpl }}
</group>
</group>

<output
name="test1-45"
load="python"
functions="is_equal"
description="test null path when its a child group right after start re"
>
{
    "test1-45_vrf_BGP": {
        "ospf_to_bgp_redistr_rpl": "vrf_nameSVRF-OSPF->BGP"
    }
}
</output>



<input load="text" name="test1-46">
router bgp 65100
 rid 1.1.1.1
 !
 address-family ipv4 vrf vrf_name
  redistribute ospf 321 match internal external 1 external 2 route-map vrf_nameSVRF-OSPF->BGP
</input>

<group name="test1-46_vrf_BGP" input="test1-46" output="test1-46">
router bgp 65100 {{ _start_ }}
<group name="_.next">
 address-family ipv4 vrf vrf_name {{ _start_ }}
  redistribute ospf 321 match internal external 1 external 2 route-map {{ ospf_to_bgp_redistr_rpl }}
</group>
</group>

<output
name="test1-46"
load="python"
functions="is_equal"
description="test null path when its a child group with children right after start re"
>
{
    "test1-46_vrf_BGP": {
        "next": {
            "ospf_to_bgp_redistr_rpl": "vrf_nameSVRF-OSPF->BGP"
        }
    }
}
</output>



<input load="text" name="test1-47">
interface Vlan779
 ip address 2.2.2.2/24
!
interface Vlan780
 ip address 2.2.2.3/24
!
</input>

<group name="test1-47-interfaces1" contains_val="'ip', '2.2.2.2/24'" input="test1-47" output="test1-47">
interface {{ interface }}
 ip address {{ ip }}
</group>

<output
name="test1-47"
load="python"
functions="is_equal"
description="test group contains_val function"
>
{
    "test1-47-interfaces1": {
        "interface": "Vlan779",
        "ip": "2.2.2.2/24"
    }
}
</output>



<input load="text" name="test1-48">
interface Vlan779
 ip address 2.2.2.2/24
!
interface Vlan780
 ip address 2.2.2.3/24
!
</input>

<group name="test1-48-interfaces1" exclude_val="'interface', 'Vlan779'" input="test1-48" output="test1-48">
interface {{ interface }}
 ip address {{ ip }}
</group>

<output
name="test1-48"
load="python"
functions="is_equal"
description="test group exclude_val function"
>
{
    "test1-48-interfaces1": {
        "interface": "Vlan780",
        "ip": "2.2.2.3/24"
    }
}
</output>



<input load="text" name="test1-49">
H20123456789 Tuesday Eastern
L1John Smith's Apple Store   1234 Wall Street    New York, New York 01234
D17777777               20191126 2507   0000000000001
D28888888           6789012             9876520000002
D17777777               20191126 3424   0000000000002
D28888888           6789012             9876520000002
HT00000000000000000000000000000000000000000000000000000001
L1Mark Sloan's Flower Store  1235 23rd Street    Dallas,   Texas    01234
D17777777               20191126 1307   0000000000003
D26666666           6789012             9876520000002
HT00000000000000000000000000000000000000000000000000000001
FT0382927439297843+099876333453
</input>

<group name="top" input="test1-49" output="test1-49">
H2{{ h2 | DIGIT | _exact_ }} {{ date | PHRASE }}
<group name="second">
L1{{ person | PHRASE }}   {{ street | PHRASE }}    {{ state | ORPHRASE }}, {{ city | ORPHRASE }} {{ postcode | DIGIT }}
D1{{ d1 | DIGIT }}  {{ d1_1 | DIGIT }}  {{ d1_2 | DIGIT }}   {{ d1_c | DIGIT }}
D2{{ d2 | DIGIT | _exact_ }}  {{ d2_a | DIGIT }}  {{ d2_b | DIGIT }}
</group>
</group>

<output
name="test1-49"
load="python"
functions="is_equal"
description="test match varible names with digit and _exact_ indicator"
>
{
    "top": {
        "date": "Tuesday Eastern",
        "h2": "0123456789",
        "second": [
            {
                "city": "New York",
                "d1": "7",
                "d1_1": "20191126",
                "d1_2": "2507",
                "d1_c": "0000000000001",
                "d2": "8888888",
                "d2_a": "6789012",
                "d2_b": "9876520000002",
                "person": "John Smith's Apple Store",
                "postcode": "01234",
                "state": "New York",
                "street": "1234 Wall Street"
            },
            {
                "city": "Texas",
                "d1": "7",
                "d1_1": "20191126",
                "d1_2": "1307",
                "d1_c": "0000000000003",
                "d2": "6666666",
                "d2_a": "6789012",
                "d2_b": "9876520000002",
                "person": "Mark Sloan's Flower Store",
                "postcode": "01234",
                "state": "Dallas",
                "street": "1235 23rd Street"
            }
        ]
    }
}
</output>




<input load="text" name="test1-50-1">
router bgp 65123
 !
 address-family ipv4 vrf VRF2
  neighbor 10.100.100.212 activate
  neighbor 10.227.147.122 activate
 exit-address-family
 !
 address-family ipv4 vrf VRF1
  neighbor 10.61.254.67 activate
  neighbor 10.61.254.68 activate
 exit-address-family
</input>

<group name="test1-50-1_bgp_config" input="test1-50-1" output="test1-50-1">
router bgp {{ bgp_asn }}

<group name="VRFs" record="vrf_test1_50_1">
 address-family {{ afi }} vrf {{ vrf_test1_50_1 }}
  <group name="neighbors**.{{ neighbor }}**" method="table" set="vrf_test1_50_1">
  neighbor {{ neighbor | let("afi_activated", True) }} activate
  </group>
 exit-address-family {{ _end_ }}
</group>

</group>

<output
name="test1-50-1"
load="python"
functions="is_equal"
description="test group record and set functions test-1"
>
{   'test1-50-1_bgp_config': {   'VRFs': [   {   'afi': 'ipv4',
                                                 'neighbors': {   '10.100.100.212': {   'afi_activated': True,
                                                                                        'vrf_test1_50_1': 'VRF2'},
                                                                  '10.227.147.122': {   'afi_activated': True,
                                                                                        'vrf_test1_50_1': 'VRF2'}},
                                                 'vrf_test1_50_1': 'VRF2'},
                                             {   'afi': 'ipv4',
                                                 'neighbors': {   '10.61.254.67': {   'afi_activated': True,
                                                                                      'vrf_test1_50_1': 'VRF1'},
                                                                  '10.61.254.68': {   'afi_activated': True,
                                                                                      'vrf_test1_50_1': 'VRF1'}},
                                                 'vrf_test1_50_1': 'VRF1'}],
                                 'bgp_asn': '65123'}}
</output>



<input load="text" name="test1-50-2">
router bgp 65123
 !
 address-family ipv4 vrf VRF2
  neighbor 10.100.100.212 activate
  neighbor 10.227.147.122 activate
 exit-address-family
 !
 address-family ipv4 vrf VRF1
  neighbor 10.61.254.67 activate
  neighbor 10.61.254.68 activate
 exit-address-family
</input>

<group name="test1-50-2_bgp_config" input="test1-50-2" output="test1-50-2">
router bgp {{ bgp_asn }}

<group name="VRFs" record="vrf, vrf_test1_50_2">
 address-family {{ afi }} vrf {{ vrf }}
  <group name="neighbors**.{{ neighbor }}**" method="table" set="vrf_test1_50_2, peer_vrf">
  neighbor {{ neighbor | let("afi_activated", True) }} activate
  </group>
 exit-address-family {{ _end_ }}
</group>

</group>

<output
name="test1-50-2"
load="python"
functions="is_equal"
description="test group record and set functions test-2 with variables renaming"
>
{   'test1-50-2_bgp_config': {   'VRFs': [   {   'afi': 'ipv4',
                                                 'neighbors': {   '10.100.100.212': {   'afi_activated': True,
                                                                                        'peer_vrf': 'VRF2'},
                                                                  '10.227.147.122': {   'afi_activated': True,
                                                                                        'peer_vrf': 'VRF2'}},
                                                 'vrf': 'VRF2'},
                                             {   'afi': 'ipv4',
                                                 'neighbors': {   '10.61.254.67': {   'afi_activated': True,
                                                                                      'peer_vrf': 'VRF1'},
                                                                  '10.61.254.68': {   'afi_activated': True,
                                                                                      'peer_vrf': 'VRF1'}},
                                                 'vrf': 'VRF1'}],
                                 'bgp_asn': '65123'}}
</output>




<input load="text" name="test1-51">
router bgp 65123
 !
 address-family ipv4
  neighbor 1.1.1.1 activate
  neighbor 2.2.2.2 activate
 exit-address-family
 !
 address-family vpnv4
  neighbor 1.1.1.3 activate
  neighbor 2.2.2.3 activate
 exit-address-family
 !
 address-family ipv4 vrf VRF2
  redistribute connected
  neighbor 10.100.100.212 activate
  neighbor 10.227.147.122 activate
 exit-address-family
 !
 address-family ipv6 vrf VRF1
  redistribute static
  neighbor 10.61.254.67 activate
  neighbor 10.61.254.68 activate
 exit-address-family
</input>

<group name="test_1_51_bgp_config" input="test1-51" output="test1-51">
router bgp {{ bgp_asn }}
<group name="vrf-config**.{{ vrf }}" functions="record(vrf) | record(afi)">
 address-family {{ afi }} vrf {{ vrf }}
 address-family {{ afi | _start_ }}
  redistribute {{ redistribute }}
  <group name="/test_1_51_bgp_config.neighbors-config**.{{ neighbor }}**" method="table" 
  functions="set(vrf, default='global') | set(afi, default='None')">
  neighbor {{ neighbor | let("afi_activated", True) }} activate
  </group>
 exit-address-family {{ _end_ }}
</group>
</group>

<output
name="test1-51"
load="json"
functions="is_equal"
description="test group absolute path and record and set functions"
>
{
    "test_1_51_bgp_config": {
        "bgp_asn": "65123",
        "neighbors-config": {
            "1.1.1.1": {
                "afi": "ipv4",
                "afi_activated": true,
                "vrf": "global"
            },
            "1.1.1.3": {
                "afi": "vpnv4",
                "afi_activated": true,
                "vrf": "global"
            },
            "10.100.100.212": {
                "afi": "ipv4",
                "afi_activated": true,
                "vrf": "VRF2"
            },
            "10.227.147.122": {
                "afi": "ipv4",
                "afi_activated": true,
                "vrf": "VRF2"
            },
            "10.61.254.67": {
                "afi": "ipv6",
                "afi_activated": true,
                "vrf": "VRF1"
            },
            "10.61.254.68": {
                "afi": "ipv6",
                "afi_activated": true,
                "vrf": "VRF1"
            },
            "2.2.2.2": {
                "afi": "ipv4",
                "afi_activated": true,
                "vrf": "global"
            },
            "2.2.2.3": {
                "afi": "vpnv4",
                "afi_activated": true,
                "vrf": "global"
            }
        },
        "vrf-config": {
            "VRF1": {
                "afi": "ipv6",
                "redistribute": "static"
            },
            "VRF2": {
                "afi": "ipv4",
                "redistribute": "connected"
            }
        }
    }
}
</output>


<input load="text" name="test1-52">
router bgp 64100
 !
 address-family ipv4 vrf TPGUCN
  neighbor 1.1.1.1 password 7 blabla
  neighbor 1.1.1.1 update-source Loopback0
 exit-address-family
</input>

<group name="test1_52_bgp_config" input="test1-52" output="test1-52">
router bgp {{ bgp_asn }}

<!-- VRF and per-vrf afi peerings section -->
<group name="vrf_config**.{{ vrf }}**" functions="record('afi') | record('vrf')">
 address-family {{ afi | ORPHRASE }} vrf {{ vrf }}
 <group name="/test1_52_bgp_config.neighbors**.{{ neighbor }}**" method="table" functions="set('vrf')">
  neighbor {{ neighbor }} update-source {{ session_source_interface | resuball("IfsNormalize") }}
  neighbor {{ neighbor | let("authentication_mode", "md5") }} password 7 {{ ignore }}
  {{ authentication_mode | set("null") }}
 </group>
 exit-address-family {{ _end_ }}
</group>

</group>

<output
name="test1-52"
load="json"
functions="is_equal"
description="test let vs set behavior"
>
{
    "test1_52_bgp_config": {
        "bgp_asn": "64100",
        "neighbors": {
            "1.1.1.1": {
                "authentication_mode": "md5",
                "session_source_interface": "Loopback0",
                "vrf": "TPGUCN"
            }
        },
        "vrf_config": {
            "TPGUCN": {
                "afi": "ipv4"
            }
        }
    }
}
</output>


<input load="text" name="test1-53">
FastEthernet0/0 is up, line protocol is up
  Hardware is Gt96k FE, address is c201.1d00.0000 (bia c201.1d00.1234)
FastEthernet0/1 is up,   line protocol is up
  Hardware is Gt96k FE, address is b20a.1e00.8777 (bia c201.1d00.1111)
</input>

<vars>
test1_53_pattern_var = r"\S+|\d+"
</vars>

<group name="interfaces_test1_53" input="test1-53" output="test1-53">
{{ interface | _exact_space_ }} is up,   line protocol is up
  Hardware is Gt96k FE, address is {{ ignore("test1_53_pattern_var") }} (bia {{MAC}})
</group>

<output
name="test1-53"
load="json"
functions="is_equal"
description="test _exact_space_ indicator behavior"
>
{
    "interfaces_test1_53": {
        "MAC": "c201.1d00.1111",
        "interface": "FastEthernet0/1"
    }
}
</output>



<input load="text" name="test1-54">
interface Vlan779
 description some long description-bla
!
interface Vlan780
 description some_short_description-bla
</input>

<group name="interfaces1_test1_54" input="test1-54" output="test1-54">
interface {{ interface }}
 description {{ description | ORPHRASE | truncate(2) }}
</group>

<output
name="test1-54"
load="json"
functions="is_equal"
description="test truncate match variable function"
>
{
    "interfaces1_test1_54": [
        {
            "description": "some long",
            "interface": "Vlan779"
        },
        {
            "description": "some_short_description-bla",
            "interface": "Vlan780"
        }
    ]
}
</output>


<input load="text" name="test1-55">
ntp server 1.2.3.4
</input>
<macro>
def test1_55_macro_1(data):
    data["check_1"] = True
    return data
</macro>
<macro>
def test1_55_macro_2(data):
    data["check_2"] = False
    return data
</macro>
<group name="test1-55_interfaces_macro*" input="test1-55" output="test1-55" macro="test1_55_macro_1, test1_55_macro_2">
ntp server {{ ntp_server }}
</group>
<output name="test1-55"
load="json"
functions="is_equal"
description="test group multiple comma separated macro"
>
{
    "test1-55_interfaces_macro": [
        {
            "check_1": true,
            "check_2": false,
            "ntp_server": "1.2.3.4"
        }
    ]
}
</output>


<input load="text" name="test1-56">
interface Lo0
 ip address 124.171.238.50 32
!
interface Lo1
 ip address 1.1.1.1 32
</input>
<vars>
test1_56_subnet="1.1.1.0/24"
</vars>
<group name="test1_56_cidr_match_vars" input="test1-56" output="test1-56" contains="ip">
interface {{ interface }}
 ip address {{ ip | cidr_match(test1_56_subnet) }} {{ mask }}
</group>
<output name="test1-56"
load="json"
functions="is_equal"
description="test match variable cidr_match function referencing variable"
>
{
    "test1_56_cidr_match_vars": {
        "interface": "Lo1",
        "ip": "1.1.1.1",
        "mask": "32"
    }
}
</output>


<input load="text" name="test1-57">
interface Lo0
 ip address 124.171.238.50 32
!
interface Lo1
 ip address 1.1.1.1 32
</input>
<vars>
test1_57_ip_in_question="1.1.1.1"
</vars>
<group name="test1_57_contains_val_vars" input="test1-57" output="test1-57" contains_val="ip, test1_57_ip_in_question">
interface {{ interface }}
 ip address {{ ip }} {{ mask }}
</group>
<output name="test1-57"
load="json"
functions="is_equal"
description="test group contains_val function referencing variable"
>
{
    "test1_57_contains_val_vars": {
        "interface": "Lo1",
        "ip": "1.1.1.1",
        "mask": "32"
    }
}
</output>


<input load="text" name="test1-58">
device1#
interface Lo0
 ip address 124.171.238.50 32
!
interface Lo1
 description this interface has description
 ip address 1.1.1.1 32
</input>
<vars>
test1_58_intf_validate = {
    'description': {'required': True, 'type': 'string'}
}
test1_58_hostname="device1"
</vars>
<group name="test1-58_validate_checks" input="test1-58" output="test1-58"
validate="test1_58_intf_validate, info='{hostname}:{interface} has description', result='result'">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 ip address {{ ip }} {{ mask }}
 {{ hostname | set(test1_58_hostname) }}
</group>
<output name="test1-58"
load="json"
functions="is_equal"
description="test group validate function"
>
{
    "test1-58_validate_checks": [
        {
            "hostname": "device1",
            "info": "device1:Lo0 has description",
            "interface": "Lo0",
            "ip": "124.171.238.50",
            "mask": "32",
            "result": false
        },
        {
            "description": "this interface has description",
            "hostname": "device1",
            "info": "device1:Lo1 has description",
            "interface": "Lo1",
            "ip": "1.1.1.1",
            "mask": "32",
            "result": true
        }
    ]
}
</output>


<input load="text" name="test1-59">
switch-1#show cdp neighbors detail 
-------------------------
Device ID: switch-2
Entry address(es): 
  IP address: 10.13.1.7
Platform: cisco WS-C6509,  Capabilities: Router Switch IGMP 
Interface: GigabitEthernet4/6,  Port ID (outgoing port): GigabitEthernet1/5

-------------------------
Device ID: switch-3
Entry address(es): 
  IP address: 10.17.14.1
Platform: cisco WS-C3560-48TS,  Capabilities: Switch IGMP 
Interface: GigabitEthernet1/1,  Port ID (outgoing port): GigabitEthernet0/1
</input>
<group name="test1-59_expand_check" input="test1-59" output="test1-59" expand="">
Device ID: {{ target.id }}
  IP address: {{ target.top_label }}
Platform: {{ target.bottom_label | ORPHRASE }},  Capabilities: {{ ignore | ORPHRASE }} 
Interface: {{ src_label | resuball(IfsNormalize) }},  Port ID (outgoing port): {{ trgt_label | ORPHRASE | resuball(IfsNormalize) }}
{{ source | set("hostname") }}
</group>
<output name="test1-59"
load="json"
functions="is_equal"
description="test group expand function"
>
{
    "test1-59_expand_check": [
        {
            "source": "hostname",
            "src_label": "GigabitEthernet4/6",
            "target": {
                "id": "switch-2",
                "top_label": "10.13.1.7"
            },
            "trgt_label": "GigabitEthernet1/5"
        },
        {
            "source": "hostname",
            "src_label": "GigabitEthernet1/1",
            "target": {
                "id": "switch-3",
                "top_label": "10.17.14.1"
            },
            "trgt_label": "GigabitEthernet0/1"
        }
    ]
}
</output>


<!--output to print raw python result to screen
<output
name="print_python"
returner="terminal" colour=""  red="False" green="True"
format="raw"
/>
-->

<!--final output to put all results in tabulate table-->
<output 
format="tabulate"
returner="terminal" colour=""  red="False" green="True"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>


<!--one more teamplte###############################################################################################-->
<template
name="template2"
description="test vars path forming and saving in results"
>

<vars name="vars.info*.{{ hostname }}">
hostname='gethostname' 
</vars>

<vars name=''>
caps = "ORPHRASE | upper"
</vars>

<vars name="vars.info*.{{ hostname }}">
filename='getfilename' 
</vars>

<input name="test2-1" load="text" groups="interfaces">
router1#show run int vlan 777
interface Vlan777
 description Management
 ip address 192.168.0.1/24
 vrf MGMT
</input>

<group name="interfaces" output="test2-1">
interface {{ interface }}
 description {{ description }}
 ip address {{ ip }} {{ mask }}
 vrf {{ vrf }}
</group>

<output name="test2-1"
load="json"
functions="is_equal"
description="test vars path forming and saving in results"
>
{
    "interfaces": {
        "description": "Management",
        "interface": "Vlan777",
        "vrf": "MGMT"
    },
    "vars": {
        "info": [
            {
                "router1": {
                    "filename": "text_data"
                }
            }
        ]
    }
}
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



<!--one more teamplte###############################################################################################-->
<template
name="template3"
description="template to test csv/tabulate group specific outputters"
>
<!--test csv and tabulate outputters-->
<input name="test3-1" load="text" groups="interfaces2.trunks2, interfaces3.trunks3">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group with group specific outputs:-->
<group name="interfaces2.trunks2" output="out_csv2, test3-1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<group name="interfaces3.trunks3" output="out_tabulate2, test3-2">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--group specific outputs:-->
<out
name="out_csv2"
path="interfaces2.trunks2"
format="csv"
sep=","
missing="undefined"
description="group specific csv outputter"
/>

<out 
name="test3-1"
load="text"
returner="self"
functions="is_equal"
description="test csv group specific outputter"
>"description","interface","ip","mask","trunk_vlans","vrf"
"some description","GigabitEthernet3/3","undefined","undefined","138,166-173","undefined"
"undefined","GigabitEthernet3/4","undefined","undefined","100-105","undefined"
"undefined","GigabitEthernet3/5","1.1.1.1","255.255.255.255","459,531,704-707","ABC_VRF"</out>

<out
name="out_tabulate2"
path="interfaces3.trunks3"
format="tabulate"
description="group specific tabulate outputter"
/>

<out 
name="test3-2"
load="text"
returner="self"
functions="is_equal"
description="test tabulate group specific outputter"
>description       interface           ip       mask             trunk_vlans      vrf
----------------  ------------------  -------  ---------------  ---------------  -------
some description  GigabitEthernet3/3                            138,166-173
                  GigabitEthernet3/4                            100-105
                  GigabitEthernet3/5  1.1.1.1  255.255.255.255  459,531,704-707  ABC_VRF</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>




<!--one more teamplte###############################################################################################-->
<template
name="template4"
description="template to test csv/tabulate global outputters"
>
<!--test csv and tabulate outputters-->
<input name="test4-1" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/3
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/4
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/5
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
interface GigabitEthernet3/7
 switchport trunk allowed vlan add 138,166-173 
 description some description
!
interface GigabitEthernet3/8
 switchport trunk allowed vlan add 100-105
!
interface GigabitEthernet3/9
 switchport trunk allowed vlan add 459,531,704-707
 ip address 1.1.1.1 255.255.255.255
 vrf forwarding ABC_VRF
!
</input>

<!--group for global outputs:-->
<group name="interfaces.trunks">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 vrf forwarding {{ vrf }}
 ip address {{ ip }} {{ mask }}
!{{ _end_ }}
</group>

<!--global outputs:-->
<out
name="out_csv"
path="interfaces.trunks"
format="csv"
returner="self"
sep=","
missing="undefined"
load="python"
quote='"'
/>

<out 
name="test4-1"
load="text"
returner="self"
functions="is_equal"
description="test global csv outputter"
>"description","interface","ip","mask","trunk_vlans","vrf"
"some description","GigabitEthernet3/3","undefined","undefined","138,166-173","undefined"
"undefined","GigabitEthernet3/4","undefined","undefined","100-105","undefined"
"undefined","GigabitEthernet3/5","1.1.1.1","255.255.255.255","459,531,704-707","ABC_VRF"
"some description","GigabitEthernet3/7","undefined","undefined","138,166-173","undefined"
"undefined","GigabitEthernet3/8","undefined","undefined","100-105","undefined"
"undefined","GigabitEthernet3/9","1.1.1.1","255.255.255.255","459,531,704-707","ABC_VRF"</out>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>
</template>



<template
name="template5"
description="template to test yaml,json,python,ini,csv vars loaders"
>

<input load="text" name="test5-1">
interface GigabitEthernet1/1
 ip address 192.168.123.1 255.255.255.0
!
</input>

<!--Python formatted variables data-->
<vars name="vars_test5_1">
python_data = ['.lab.local', '.static.on.net', '.abc']
</vars>

<!--YAML formatted variables data-->
<vars load="yaml" name="vars_test5_1">
yaml_data:
  - '.lab.local'
  - '.static.on.net'
  - '.abc'
</vars>

<!--Json formatted variables data-->
<vars load="json" name="vars_test5_1">
{
    "json_data": [
        ".lab.local",
        ".static.on.net",
        ".abc"
    ]
}
</vars>

<!--INI formatted variables data-->
<variables load="ini" name="vars_test5_1">
[ini_data]
1: '.lab.local'
2: '.static.on.net'
3: '.abc'
</variables>

<!--CSV formatted variables data-->
<variables load="csv" name="vars_test5_1.csv_data">
id, domain
1,  .lab.local
2,  .static.on.net
3,  .abc
</variables>

<group name="interfaces_test5_1" output="test5-1" input="test5-1">
interface {{ interface }}
 ip address {{ ip }} {{ mask }}	
</group>

<output name="test5-1"
description="test yaml,json,python,ini,csv vars loaders"
load="python"
functions="is_equal"
>
{   'interfaces_test5_1': {   'interface': 'GigabitEthernet1/1',
                      'ip': '192.168.123.1',
                      'mask': '255.255.255.0'},
    'vars_test5_1': {   'csv_data': {   '1': {   ' domain': '  .lab.local'},
                                '2': {   ' domain': '  .static.on.net'},
                                '3': {   ' domain': '  .abc'}},
                'ini_data': {   '1': "'.lab.local'",
                                '2': "'.static.on.net'",
                                '3': "'.abc'"},
                'json_data': [  '.lab.local',
                                '.static.on.net',
                                '.abc'],
                'python_data': ['.lab.local', '.static.on.net', '.abc'],
                'yaml_data': ['.lab.local', '.static.on.net', '.abc']}}
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>



<template 
name="template6"
description="per_template results formatting test for anonymous group"
results="per_template"
>

<input load="text">
switch1-1#show run interfaces
interface Vlan163
 description [OOB management-1]
 ip address 10.0.10.3 255.255.255.0
!
interface GigabitEthernet6/41
 description [uplink to core-1]
 ip address 192.168.10.3 255.255.255.0
</input>

<input load="text">
switch1-2#show run interfaces
interface Vlan164
 description [OOB management-2]
 ip address 10.0.11.3 255.255.255.0
!
interface GigabitEthernet6/42
 description [uplink to core-2]
 ip address 192.168.11.3 255.255.255.0
</input>

<vars>
hostname="gethostname"
</vars>

<group>
interface {{ interface }}
 description {{ description | PHRASE }}
 ip address {{ ip }} {{ mask }}
 {{ hostname | set("hostname") }}
</group>

<output name="test6-1"
description="per_template results formatting - anonymous group"
load="json"
functions="is_equal"
>
[
        {
            "description": "[OOB management-1]",
            "hostname": "switch1-1",
            "interface": "Vlan163",
            "ip": "10.0.10.3",
            "mask": "255.255.255.0"
        },
        {
            "description": "[uplink to core-1]",
            "hostname": "switch1-1",
            "interface": "GigabitEthernet6/41",
            "ip": "192.168.10.3",
            "mask": "255.255.255.0"
        },
        {
            "description": "[OOB management-2]",
            "hostname": "switch1-2",
            "interface": "Vlan164",
            "ip": "10.0.11.3",
            "mask": "255.255.255.0"
        },
        {
            "description": "[uplink to core-2]",
            "hostname": "switch1-2",
            "interface": "GigabitEthernet6/42",
            "ip": "192.168.11.3",
            "mask": "255.255.255.0"
        }
]
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>




<template 
name="template7"
description="per_template results formatting test for named group"
results="per_template"
>

<input load="text">
switch1-1#show run interfaces
interface Vlan163
 description [OOB management-1]
 ip address 10.0.10.3 255.255.255.0
!
interface GigabitEthernet6/41
 description [uplink to core-1]
 ip address 192.168.10.3 255.255.255.0
</input>

<input load="text">
switch1-2#show run interfaces
interface Vlan164
 description [OOB management-2]
 ip address 10.0.11.3 255.255.255.0
!
interface GigabitEthernet6/42
 description [uplink to core-2]
 ip address 192.168.11.3 255.255.255.0
</input>

<vars>
hostname="gethostname"
</vars>

<group name="interfaces.{{ interface }}">
interface {{ interface }}
 description {{ description | PHRASE }}
 ip address {{ ip }} {{ mask }}
 {{ hostname | set("hostname") }}
</group>

<output name="test7-1"
description="per_template results formatting - named group"
load="json"
functions="is_equal"
>
    {
        "interfaces": {
            "GigabitEthernet6/41": {
                "description": "[uplink to core-1]",
                "hostname": "switch1-1",
                "ip": "192.168.10.3",
                "mask": "255.255.255.0"
            },
            "GigabitEthernet6/42": {
                "description": "[uplink to core-2]",
                "hostname": "switch1-2",
                "ip": "192.168.11.3",
                "mask": "255.255.255.0"
            },
            "Vlan163": {
                "description": "[OOB management-1]",
                "hostname": "switch1-1",
                "ip": "10.0.10.3",
                "mask": "255.255.255.0"
            },
            "Vlan164": {
                "description": "[OOB management-2]",
                "hostname": "switch1-2",
                "ip": "10.0.11.3",
                "mask": "255.255.255.0"
            }
        }
    }
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>




<template
name="template8"
description="test group specific and global inputs"
>

<input name="input_1" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/11
 description input_1_data
 switchport trunk allowed vlan add 111,222
!
</input>

<input name="input_2" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/22
 description input_2_data
 switchport trunk allowed vlan add 222,888
!
</input>

<input name="input_3" load="text" groups="interfaces.trunks">
interface GigabitEthernet3/33
 description input_3_data
 switchport trunk allowed vlan add 333,999
!
</input>

<input name="input_4" load="text">
interface GigabitEthernet3/44
 description input_4_data
 switchport trunk allowed vlan add 444,1010
!
</input>

<input name="input_5" load="text">
interface GigabitEthernet3/55
 description input_5_data
 switchport trunk allowed vlan add 555,2020
!
</input>

<group name="interfaces.trunks" input="input_1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ group_id | set("group_1") }}
!{{ _end_ }}
</group>

<group name="interfaces.trunks" input="input_2">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ group_id | set("group_2") }}
!{{ _end_ }}
</group>

<group name="interfaces.trunks" input="input_2">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ group_id | set("group_3") }}
!{{ _end_ }}
</group>

<group name="interfaces.trunks">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ group_id | set("group_4") }}
!{{ _end_ }}
</group>

<group name="interfaces.trunks" input="input_5">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ group_id | set("group_5") }}
!{{ _end_ }}
</group>

<output name="test8-1"
description="test group specific and global inputs behavior"
load="json"
functions="is_equal"
>
[
    {
        "interfaces": {
            "trunks": {
                "description": "input_1_data",
                "group_id": "group_1",
                "interface": "GigabitEthernet3/11",
                "trunk_vlans": "111,222"
            }
        }
    },
    {
        "interfaces": {
            "trunks": [
                {
                    "description": "input_2_data",
                    "group_id": "group_2",
                    "interface": "GigabitEthernet3/22",
                    "trunk_vlans": "222,888"
                },
                {
                    "description": "input_2_data",
                    "group_id": "group_3",
                    "interface": "GigabitEthernet3/22",
                    "trunk_vlans": "222,888"
                }
            ]
        }
    },
    {
        "interfaces": {
            "trunks": {
                "description": "input_3_data",
                "group_id": "group_4",
                "interface": "GigabitEthernet3/33",
                "trunk_vlans": "333,999"
            }
        }
    },
    {
        "interfaces": {
            "trunks": {
                "description": "input_4_data",
                "group_id": "group_4",
                "interface": "GigabitEthernet3/44",
                "trunk_vlans": "444,1010"
            }
        }
    },
    {
        "interfaces": {
            "trunks": {
                "description": "input_5_data",
                "group_id": "group_5",
                "interface": "GigabitEthernet3/55",
                "trunk_vlans": "555,2020"
            }
        }
    }
]
</output>



<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>

</template>



<template
name="test9-1"
description="test template variables and groups runs handling, runs should be updated with lates variables only"
>

<input load="text">
switch1# show run int
hostname switch12345
!
interface GigabitEthernet3/11
 description input_1_data
 switchport trunk allowed vlan add 111,222
!
</input>

<vars>
hostname_var_test_9_1 = "gethostname"
</vars>

<group name="params_test_9_1">
hostname {{ hostname | record("hostname_var_test_9_1") }}
</group>

<group name="interfaces_test_9_1">
interface {{ interface }}
 switchport trunk allowed vlan add {{ trunk_vlans }}
 description {{ description | ORPHRASE }}
 {{ hostname | set("hostname_var_test_9_1") }}
!{{ _end_ }}
</group>

<output name="test9-1"
description="test variables and group runs handling"
load="json"
functions="is_equal"
>
[
    {
        "interfaces_test_9_1": {
            "description": "input_1_data",
            "hostname": "switch12345",
            "interface": "GigabitEthernet3/11",
            "trunk_vlans": "111,222"
        },
        "params_test_9_1": {
            "hostname": "switch12345"
        }
    }
]
</output>

<!--final output to put all results in tabulate table-->
<output 
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
/>


</template>







<template
name="template10"
description="test output traverse and dict_to_list functions"
>

<input name="in1" load="text">
some.user@router-fw-host> show configuration interfaces | display set 
set interfaces ge-0/0/11 unit 0 description "SomeDescription in1"
set interfaces ge-0/0/11 unit 0 family inet address 10.0.40.121/31
set interfaces ge-5/0/5 unit 0 description "L3VPN: somethere"
set interfaces ge-5/0/5 unit 0 family inet address 10.0.31.48/31
set interfaces lo0 unit 0 description "Routing Loopback"
set interfaces lo0 unit 0 family inet address 10.0.0.254/32 primary
set interfaces lo0 unit 0 family inet address 10.6.4.4/32
</input>

<input load="text">
some.user@router-fw-host> show configuration interfaces | display set 
set interfaces ge-0/0/11 unit 0 description "SomeDescription glob1"
set interfaces ge-0/0/11 unit 0 family inet address 10.0.40.121/31
set interfaces ge-5/0/5 unit 0 description "L3VPN: somethere"
set interfaces ge-5/0/5 unit 0 family inet address 10.0.31.48/31
set interfaces lo0 unit 0 description "Routing Loopback"
set interfaces lo0 unit 0 family inet address 10.0.0.254/32 primary
set interfaces lo0 unit 0 family inet address 10.6.4.4/32
</input>

<input load="text">
some.user@router-fw-host> show configuration interfaces | display set 
set interfaces ge-0/0/11 unit 0 description "SomeDescription glob2"
set interfaces ge-0/0/11 unit 0 family inet address 10.0.40.121/31
set interfaces ge-5/0/5 unit 0 description "L3VPN: somethere"
set interfaces ge-5/0/5 unit 0 family inet address 10.0.31.48/31
set interfaces lo0 unit 0 description "Routing Loopback"
set interfaces lo0 unit 0 family inet address 10.0.0.254/32 primary
set interfaces lo0 unit 0 family inet address 10.6.4.4/32
</input>

<vars name="vars">
hostname = "gethostname"
</vars>

<group name="specific_out_interfaces.{{ interface }}{{ unit }}**" method="table" input="in1" output="out1">
set interfaces {{ interface | append('.') }} unit {{ unit }} family inet address {{ ip }}
set interfaces {{ interface | append('.') }} unit {{ unit }} description "{{ description | ORPHRASE }}"
set interfaces {{ interface | append('.') }} unit {{ unit }} family inet address {{ ip }} primary
{{ hostname | set("hostname") }}
</group>

<output name="out1" functions="traverse(path='specific_out_interfaces') | dict_to_list(key_name='interface')"/>

<group name="glob_out_interfaces.{{ interface }}{{ unit }}**" method="table">
set interfaces {{ interface | append('.') }} unit {{ unit }} family inet address {{ ip }}
set interfaces {{ interface | append('.') }} unit {{ unit }} description "{{ description | ORPHRASE }}"
set interfaces {{ interface | append('.') }} unit {{ unit }} family inet address {{ ip }} primary
{{ hostname | set("hostname") }}
</group>

<output 
functions="dict_to_list(key_name='interface', path='glob_out_interfaces')"
/>

<output name="test10-1-py3"
description="py3 - test output traverse and dict_to_list functions"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    [
        [
            [],
            [],
            []
        ]
    ],
    [
        {
            "description": "SomeDescription glob1",
            "hostname": "router-fw-host",
            "interface": "ge-0/0/11.0",
            "ip": "10.0.40.121/31"
        },
        {
            "description": "L3VPN: somethere",
            "hostname": "router-fw-host",
            "interface": "ge-5/0/5.0",
            "ip": "10.0.31.48/31"
        },
        {
            "description": "Routing Loopback",
            "hostname": "router-fw-host",
            "interface": "lo0.0",
            "ip": "10.0.0.254/32"
        }
    ],
    [
        {
            "description": "SomeDescription glob2",
            "hostname": "router-fw-host",
            "interface": "ge-0/0/11.0",
            "ip": "10.0.40.121/31"
        },
        {
            "description": "L3VPN: somethere",
            "hostname": "router-fw-host",
            "interface": "ge-5/0/5.0",
            "ip": "10.0.31.48/31"
        },
        {
            "description": "Routing Loopback",
            "hostname": "router-fw-host",
            "interface": "lo0.0",
            "ip": "10.0.0.254/32"
        }
    ]
]
</output>


<output name="test10-1-py2"
description="py2 - test output traverse and dict_to_list functions"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    [
        [
            [],
            [],
            []
        ]
    ],
    [
        {
            "description": "Routing Loopback",
            "hostname": "router-fw-host",
            "interface": "lo0.0",
            "ip": "10.0.0.254/32"
        },
        {
            "description": "L3VPN: somethere",
            "hostname": "router-fw-host",
            "interface": "ge-5/0/5.0",
            "ip": "10.0.31.48/31"
        },
        {
            "description": "SomeDescription glob1",
            "hostname": "router-fw-host",
            "interface": "ge-0/0/11.0",
            "ip": "10.0.40.121/31"
        }
    ],
    [
        {
            "description": "Routing Loopback",
            "hostname": "router-fw-host",
            "interface": "lo0.0",
            "ip": "10.0.0.254/32"
        },
        {
            "description": "L3VPN: somethere",
            "hostname": "router-fw-host",
            "interface": "ge-5/0/5.0",
            "ip": "10.0.31.48/31"
        },
        {
            "description": "SomeDescription glob2",
            "hostname": "router-fw-host",
            "interface": "ge-0/0/11.0",
            "ip": "10.0.40.121/31"
        }
    ]
]
</output>

</template>






<template
name="template11"
description="test global variables record/set functions"
>


<vars>
hostname="gethostname"
</vars>

<input load="text" name="in1">
myswitch1#show run int
interface Vlan778
 description some description input 2
 ip vrf forwarding VRF_NAME_1
 ip address 2002:fd37::91/124
!
</input>

<input load="text" name="in2">
myswitch2#show run int
interface Vlan779
 description some description input2
!
interface Vlan780
 switchport port-security mac 4
!
</input>

<group name="interfaces" input="in1">
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 ip vrf forwarding {{ vrf | record("VRF") }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
 {{ hostname | set("hostname") }}
</group>

<group name="interfaces" input="in2">
interface {{ interface }}
 description {{ description | ORPHRASE | record("my_description") }}
 switchport port-security mac {{ sec_mac }}
 {{ my_vrf | set("VRF") }}
 {{ hostname | set("hostname") }}
 {{ my_descript | set("my_description") }}
</group>

<output
name="test11"
description="test global variables record/set functions"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "interfaces": {
            "description": "some description input 2",
            "hostname": "myswitch1",
            "interface": "Vlan778",
            "ip": "2002:fd37::91",
            "mask": "124",
            "vrf": "VRF_NAME_1"
        }
    },
    {
        "interfaces": [
            {
                "description": "some description input2",
                "hostname": "myswitch2",
                "interface": "Vlan779",
                "my_descript": "some description input2",
                "my_vrf": "VRF_NAME_1"
            },
            {
                "hostname": "myswitch2",
                "interface": "Vlan780",
                "my_descript": "some description input2",
                "my_vrf": "VRF_NAME_1",
                "sec_mac": "4"
            }
        ]
    }
]
</output>

</template>





<template
name="template12"
description="test input 'extract_commands' functions"
>

<input name="in1" load="text" extract_commands="show run interfaces">
switch1-hostname#show run interfaces
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
switch1-hostname#show run interface
interface Vlan888
 description some description 888
 ip address 2002:fd37::888/124
!
interface Vlan889
 description some description 889
!
interface Vlan890
 switchport port-security mac 890
!
</input>

<input name="in2" load="text" functions="extract_commands('show run interfaces', 'show run interface')">
switch1-hostname#show run interfaces
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
!
switch1-hostname#show run interface
interface Vlan888
 description some description 888
 ip address 2002:fd37::888/124
!
interface Vlan889
 description some description 889
!
interface Vlan890
 switchport port-security mac 890
!
</input>

<group name="interfaces">
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 description {{ description | ORPHRASE }}
 switchport port-security mac {{ sec_mac }}
</group>

<output
name="test12"
description="test input 'extract_commands' functions"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "interfaces": [
            {
                "description": "some description 1",
                "interface": "Vlan778",
                "ip": "2002:fd37::91",
                "mask": "124"
            },
            {
                "description": "some description 2",
                "interface": "Vlan779"
            },
            {
                "interface": "Vlan780",
                "sec_mac": "4"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "some description 1",
                "interface": "Vlan778",
                "ip": "2002:fd37::91",
                "mask": "124"
            },
            {
                "description": "some description 2",
                "interface": "Vlan779"
            },
            {
                "interface": "Vlan780",
                "sec_mac": "4"
            },
            {
                "description": "some description 888",
                "interface": "Vlan888",
                "ip": "2002:fd37::888",
                "mask": "124"
            },
            {
                "description": "some description 889",
                "interface": "Vlan889"
            },
            {
                "interface": "Vlan890",
                "sec_mac": "890"
            }
        ]
    }
]
</output>

</template>




<template
name="template13"
description="test group sformat function"
>
<vars>
domain = "com"
</vars>

<input load="text" name="input_uptime">
switch-1 uptime is 27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds
</input>

<input load="text" name="fqdn_dets">
Default domain is lab.local
</input>

<group 
input="fqdn_dets"
name="fqdn_dets_1" 
sformat="string='{hostname}.{fqdn},{domain}', add_field='fqdn'"
>
Default domain is {{ fqdn }}
</group>

<group 
input="fqdn_dets"
name="fqdn_dets_2" 
sformat="'{hostname},{fqdn}', 'fqdn'"
>
Default domain is {{ fqdn }}
</group>

<group name="uptime" input="input_uptime">
{{ hostname | record("hostname")}} uptime is {{ uptime | PHRASE }}
</group>

<output
name="test13"
description="test group sformat function"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "uptime": {
            "hostname": "switch-1",
            "uptime": "27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds"
        }
    },
    {
        "fqdn_dets_1": {
            "fqdn": "switch-1.lab.local,com"
        },
        "fqdn_dets_2": {
            "fqdn": "switch-1,lab.local"
        }
    }
]
</output>

</template>




<template
name="template14"
description="test group itemize function"
>
<input load="text">
interface Vlan778
 description some description 1
 ip address 2002:fd37::91/124
!
interface Vlan779
 description some description 2
!
interface Vlan780
 switchport port-security mac 4
 ip address 192.168.1.1/124
!
interface Vlan790
 description some description 790
 switchport port-security mac 4
 ip address 192.168.190.1/124
!
</input>

<group name="interfaces_list**" functions="contains('ip') | itemize(key='interface')">
interface {{ interface | upper | append("a") }}
 ip address {{ ip }}
</group>

<group name="ips_list" functions="contains('description') | itemize(key='ip')">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 ip address {{ ip }}
 !{{ _end_ }}
</group>

<group name="bla" functions="contains('ip') | itemize(key='interface', path='interfaces.l3')">
interface {{ interface }}
 description {{ description | ORPHRASE }}
 ip address {{ ip }}
 !{{ _end_ }}
</group>

<output
name="test14"
description="test group itemize function"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "bla": [
            {
                "description": "some description 1",
                "interface": "Vlan778",
                "ip": "2002:fd37::91/124"
            },
            {
                "interface": "Vlan780",
                "ip": "192.168.1.1/124"
            },
            {
                "description": "some description 790",
                "interface": "Vlan790",
                "ip": "192.168.190.1/124"
            }
        ],
        "interfaces": {
            "l3": [
                "Vlan778",
                "Vlan780",
                "Vlan790"
            ]
        },
        "interfaces_list": [
            "VLAN778a",
            "VLAN780a",
            "VLAN790a"
        ],
        "ips_list": [
            "2002:fd37::91/124",
            "192.168.190.1/124"
        ]
    }
]
</output>

</template>



<template
name="template15"
description="
test groups without match results but with 
group start re default values
"
>

<input load="text">
device-hostame uptime is 27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds
</input>

<group name="uptime-1">
device-hostame uptime is {{ uptime | PHRASE }}
</group>

<group name="domain" default="Uncknown">
Default domain is {{ fqdn }}
</group>

<group name="ntp-1">
ntp server {{ server | default('Unconfigured') }}
 ntp source {{ source | default("undefined") }}
</group>

<group name="ntp-2">
ntp server {{ server }}
 ntp source {{ source | default("undefined") }}
</group>

<group name="snmp-1" default="Uncknown">
snmp community {{ community }}
snmp acl {{ acl }}
</group>

<group name="snmp-2-with-group-output" default="Uncknown" output="out-1">
snmp community {{ community }}
snmp acl {{ acl }}
</group>

<output name="out-1"/>

<output
name="test15"
description="test groups with no matches but with defaults"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[ [
    {
        "domain": {
            "fqdn": "Uncknown"
        },
        "ntp-1": {
            "server": "Unconfigured",
            "source": "undefined"
        },
        "snmp-1": {
            "acl": "Uncknown",
            "community": "Uncknown"
        },
        "uptime-1": {
            "uptime": "27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds"
        }
    },
    {
        "snmp-2-with-group-output": {
            "acl": "Uncknown",
            "community": "Uncknown"
        }
    }
] ]
</output>

</template>



<template
name="template16"
description="test _line_ indicator"
>
<input load="text">
interface Loopback0
 description Router-id-loopback
 ip address 192.168.0.113/24
!
interface Gi0/37
 description CPE_Acces
 switchport port-security
 switchport port-security maximum 5
 switchport port-security mac-address sticky
!
</input>

<group>
interface {{ interface }}
 ip address {{ ip }}/{{ mask }}
 description {{ description }}
 ip vrf {{ vrf }}
 {{ port_security_cfg | _line_ | contains("port-security") | joinmatches }}
! {{ _end_ }}
</group>

<group>
interface {{ interface }}
 {{ intf_cfg | _line_  | to_list | joinmatches }}
! {{ _end_ }}
</group>

<output
name="test16"
description="test _line_ indicator"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    [
        {
            "description": "Router-id-loopback",
            "interface": "Loopback0",
            "ip": "192.168.0.113",
            "mask": "24"
        },
        {
            "description": "CPE_Acces",
            "interface": "Gi0/37",
            "port_security_cfg": "switchport port-security\nswitchport port-security maximum 5\nswitchport port-security mac-address sticky"
        },
        {
            "interface": "Loopback0",
            "intf_cfg": [
                "description Router-id-loopback",
                "ip address 192.168.0.113/24"
            ]
        },
        {
            "interface": "Gi0/37",
            "intf_cfg": [
                "description CPE_Acces",
                "switchport port-security",
                "switchport port-security maximum 5",
                "switchport port-security mac-address sticky"
            ]
        }
    ]
]
</output>
</template>


<template
name="Test17"
description="
in below data 'remote_system_capab' matches follow _line_ matches, they should
be correctly handled using results selection logic, in addition groups with
_line_ has _end_ indicator set, hence group unlock logic should be correctly 
handled to save results properly.
"
>
<input load="text">
------------------------------------------------
Local Intf: Et0/0
Chassis id: aabb.cc00.2000
Port id: Et0/0
Port Description: Ethernet0/0
System Name: R2

System Description:
Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2018 by Cisco Systems, Inc.
Compiled Wed 28-Mar-18 11:18 by prod_rel_te

Time remaining: 108 seconds
System Capabilities: B,R
Enabled Capabilities: R
Management Addresses - not advertised
Auto Negotiation - not supported
Physical media capabilities - not advertised
Media Attachment Unit type - not advertised
Vlan ID: - not advertised


Total entries displayed: 1

------------------------------------------------
Local Intf: Et0/0
Chassis id: aabb.cc00.2004
Port id: Et0/0
Port Description: Ethernet0/0
System Name: R4

System Description:
Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2018 by Cisco Systems, Inc.
Compiled Wed 28-Mar-18 11:18 by prod_rel_te

Time remaining: 108 seconds
System Capabilities: B,R
Enabled Capabilities: R
Management Addresses - not advertised
Auto Negotiation - not supported
Physical media capabilities - not advertised
Media Attachment Unit type - not advertised
Vlan ID: - not advertised


Total entries displayed: 1

------------------------------------------------
Local Intf: Et0/1
Chassis id: aabb.cc00.2001
Port id: Et0/1
Port Description: Ethernet0/1
System Name: R3

System Description:
Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2018 by Cisco Systems, Inc.
Compiled Wed 28-Mar-18 11:18 by prod_rel_te

Time remaining: 108 seconds
System Capabilities: B,R
Enabled Capabilities: R
Management Addresses - not advertised
Auto Negotiation - not supported
Physical media capabilities - not advertised
Media Attachment Unit type - not advertised
Vlan ID: - not advertised


Total entries displayed: 1

</input>

<group name="result**.{{ interface }}*">
------------------------------------------------ {{ _start_ }}
Local Intf: {{ interface }}
Chassis id: {{ remote_chassis_id }}
Port id: {{ remote_port }}
Port Description: {{ remote_port_description }}
System Name: {{ remote_system_name }}

<group name="remote_system_description">
System Description: {{ _start_ }}
{{ remote_system_description | _line_ | joinmatches(" ") }}
{{ _end_ }}
</group>

System Capabilities: {{ remote_system_capab }}
Enabled Capabilities: {{ remote_system_enable_capab }}
</group>


<output
name="test17"
description="test group with _line_ with upper group following matches"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>

    [
        {
            "result": {
                "Et0/0": [
                    {
                        "remote_chassis_id": "aabb.cc00.2000",
                        "remote_port": "Et0/0",
                        "remote_port_description": "Ethernet0/0",
                        "remote_system_capab": "B,R",
                        "remote_system_description": {
                            "remote_system_description": "Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Wed 28-Mar-18 11:18 by prod_rel_te"
                        },
                        "remote_system_enable_capab": "R",
                        "remote_system_name": "R2"
                    },
                    {
                        "remote_chassis_id": "aabb.cc00.2004",
                        "remote_port": "Et0/0",
                        "remote_port_description": "Ethernet0/0",
                        "remote_system_capab": "B,R",
                        "remote_system_description": {
                            "remote_system_description": "Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Wed 28-Mar-18 11:18 by prod_rel_te"
                        },
                        "remote_system_enable_capab": "R",
                        "remote_system_name": "R4"
                    }
                ],
                "Et0/1": [
                    {
                        "remote_chassis_id": "aabb.cc00.2001",
                        "remote_port": "Et0/1",
                        "remote_port_description": "Ethernet0/1",
                        "remote_system_capab": "B,R",
                        "remote_system_description": {
                            "remote_system_description": "Cisco IOS Software, Linux Software (I86BI_LINUX-ADVENTERPRISEK9-M), Version 15.7(3)M2, DEVELOPMENT TEST SOFTWARE Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Wed 28-Mar-18 11:18 by prod_rel_te"
                        },
                        "remote_system_enable_capab": "R",
                        "remote_system_name": "R3"
                    }
                ]
            }
        }
    ]

</output>
</template>


<template
name="Test18"
description="
This template uses _ttp_ rlookup function inside of macro to 
lookup values for matched items.
"
>
<macro>
def add_capabilities(data):
    return [
        _ttp_["match"]["rlookup"](data=item, name="capabilities.codes")[0] 
        for item in data
    ]
</macro>

<lookup name="capabilities" load="ini">
[codes]
B: Bridge
R: Router
</lookup>

<input load="text">
System Capabilities: B,R
Enabled Capabilities: B
</input>

<group name="test18">
System Capabilities: {{ remote_system_capab | split(",") | macro("add_capabilities") }}
Enabled Capabilities: {{ remote_system_enable_capab | split(",") | macro("add_capabilities") }}
</group>

<output
name="test18"
description="test macro that uses _ttp_ function"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
    [
        {
            "test18": {
                "remote_system_capab": [
                    "Bridge",
                    "Router"
                ],
                "remote_system_enable_capab": [
                    "Bridge"
                ]
            }
        }
    ]
</output>
</template>




<template
name="Test19"
description="
This template tests behaviour of _line_ and _end_ indicators, checking
if TTP correctly handles the case when PATH for match results is not the
same as self.record PATH
"
>

<input load="text">
my_switch_1#show cdp neighbors detail 
-------------------------
Device ID: switch-2.net
Entry address(es): 
IP address: 10.251.1.49
Platform: cisco WS-C6509,  Capabilities: Router Switch IGMP 
Interface: GigabitEthernet4/6,  Port ID (outgoing port): GigabitEthernet1/5
Holdtime : 130 sec

Version :
Cisco Internetwork Operating System Software 
IOS (tm) s72033_rp Software (s72033_rp-PK9SV-M), Version 12.2(17d)SXB11a, RELEASE SOFTWARE (fc1)
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2006 by cisco Systems, Inc.
Compiled Thu 13-Apr-06 04:50 by kehsiao

advertisement version: 2
VTP Management Domain: ''
Duplex: full
Unidirectional Mode: off

-------------------------
Device ID: switch-3.net
Entry address(es): 
IP address: 10.151.28.7
Platform: cisco WS-C3560-48TS,  Capabilities: Switch IGMP 
Interface: GigabitEthernet1/1,  Port ID (outgoing port): GigabitEthernet0/1
Holdtime : 165 sec

Version :
Cisco IOS Software, C3560 Software (C3560-IPBASE-M), Version 12.2(25)SEB2, RELEASE SOFTWARE (fc1)
Copyright (c) 1986-2005 by Cisco Systems, Inc.
Compiled Tue 07-Jun-05 23:34 by yenanh

advertisement version: 2
Protocol Hello:  OUI=0x00000C, Protocol ID=0x0112; payload len=27, value=00000000FFFFFFFF010221FF00000000000000152BC02D80FF0000
VTP Management Domain: ''
Native VLAN: 500
Duplex: full
Unidirectional Mode: off

my_switch_1#
</input>

<vars>
my_hostname="gethostname"
</vars>

<group name="cdp_peers">
------------------------- {{ _start_ }}
Device ID: {{ peer_hostname }}
IP address: {{ peer_ip }}
Platform: {{ peer_platform | ORPHRASE}},  Capabilities: {{ peer_capabilities | ORPHRASE }} 
Interface: {{ local_interface }},  Port ID (outgoing port): {{ peer_interface }}
{{ local_hostname | set("my_hostname") }}

<group name="peer_software">
Version : {{ _start_ }}
{{ peer_software | _line_ | joinmatches(" ") }}
{{ _end_ }}
</group>

</group>

<output
name="test19"
description="test _line_ and _end_ indicators when match belongs to different groups"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "cdp_peers": [
            {
                "local_hostname": "my_switch_1",
                "local_interface": "GigabitEthernet4/6",
                "peer_capabilities": "Router Switch IGMP",
                "peer_hostname": "switch-2.net",
                "peer_interface": "GigabitEthernet1/5",
                "peer_ip": "10.251.1.49",
                "peer_platform": "cisco WS-C6509",
                "peer_software": {
                    "peer_software": "Cisco Internetwork Operating System Software  IOS (tm) s72033_rp Software (s72033_rp-PK9SV-M), Version 12.2(17d)SXB11a, RELEASE SOFTWARE (fc1) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2006 by cisco Systems, Inc. Compiled Thu 13-Apr-06 04:50 by kehsiao"
                }
            },
            {
                "local_hostname": "my_switch_1",
                "local_interface": "GigabitEthernet1/1",
                "peer_capabilities": "Switch IGMP",
                "peer_hostname": "switch-3.net",
                "peer_interface": "GigabitEthernet0/1",
                "peer_ip": "10.151.28.7",
                "peer_platform": "cisco WS-C3560-48TS",
                "peer_software": {
                    "peer_software": "Cisco IOS Software, C3560 Software (C3560-IPBASE-M), Version 12.2(25)SEB2, RELEASE SOFTWARE (fc1) Copyright (c) 1986-2005 by Cisco Systems, Inc. Compiled Tue 07-Jun-05 23:34 by yenanh"
                }
            }
        ]
    }
]
</output>
</template>



<template
name="Test20"
description="
Template to test null '_' path handling.
"
>
<input load="text">
my_switch_1#show cdp neighbors detail 
-------------------------
Device ID: switch-2.net
Entry address(es): 
IP address: 10.251.1.49
Platform: cisco WS-C6509,  Capabilities: Router Switch IGMP 
Interface: GigabitEthernet4/6,  Port ID (outgoing port): GigabitEthernet1/5
Interface: GigabitEthernet4/8,  Port ID (outgoing port): GigabitEthernet1/7
Holdtime : 130 sec

Version :
Cisco Internetwork Operating System Software 
IOS (tm) s72033_rp Software (s72033_rp-PK9SV-M), Version 12.2(17d)SXB11a, RELEASE SOFTWARE (fc1)
Technical Support: http://www.cisco.com/techsupport
Copyright (c) 1986-2006 by cisco Systems, Inc.
Compiled Thu 13-Apr-06 04:50 by kehsiao

advertisement version: 2
VTP Management Domain: ''
Duplex: full
Unidirectional Mode: off

-------------------------
Device ID: switch-3.net
Entry address(es): 
IP address: 10.151.28.7
Platform: cisco WS-C3560-48TS,  Capabilities: Switch IGMP 
Interface: GigabitEthernet1/1,  Port ID (outgoing port): GigabitEthernet0/1
Holdtime : 165 sec

Version :
Cisco IOS Software, C3560 Software (C3560-IPBASE-M), Version 12.2(25)SEB2, RELEASE SOFTWARE (fc1)
Copyright (c) 1986-2005 by Cisco Systems, Inc.
Compiled Tue 07-Jun-05 23:34 by yenanh

Version :
Cisco IOS Software, C3561 Software (C3560-IPBASE-M), Version 12.2(25)SEB2, RELEASE SOFTWARE (fc1)
Copyright (c) 1986-2005 by Cisco Systems, Inc.
Compiled Tue 07-Jun-05 23:34 by yenanh

advertisement version: 2
Protocol Hello:  OUI=0x00000C, Protocol ID=0x0112; payload len=27, value=00000000FFFFFFFF010221FF00000000000000152BC02D80FF0000
VTP Management Domain: ''
Native VLAN: 500
Duplex: full
Unidirectional Mode: off

my_switch_1#
</input>

<vars>
test20_hostname="gethostname"
</vars>

<group name="cdp_peers">
------------------------- {{ _start_ }}
Device ID: {{ peer_hostname }}

<group name="_.dets">
IP address: {{ peer_ip }}
<group name="platf_dets">
Platform: {{ peer_platform | ORPHRASE}},  Capabilities: {{ peer_capabilities | ORPHRASE | split(" ") }} 
</group>
</group>

<group name="_.interfaces*">
Interface: {{ local_interface }},  Port ID (outgoing port): {{ peer_interface }}
{{ local_hostname | set("test20_hostname") }}
</group>

<group name="_">
Version : {{ _start_ }}
{{ peer_software | _line_ | joinmatches(" ") }}
{{ _end_ }}
</group>

</group>


<output
name="test20"
description="test null '_' path handling"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "cdp_peers": [
            {
                "dets": {
                    "peer_ip": "10.251.1.49",
                    "platf_dets": {
                        "peer_capabilities": [
                            "Router",
                            "Switch",
                            "IGMP"
                        ],
                        "peer_platform": "cisco WS-C6509"
                    }
                },
                "interfaces": [
                    {
                        "local_hostname": "my_switch_1",
                        "local_interface": "GigabitEthernet4/6",
                        "peer_interface": "GigabitEthernet1/5"
                    },
                    {
                        "local_hostname": "my_switch_1",
                        "local_interface": "GigabitEthernet4/8",
                        "peer_interface": "GigabitEthernet1/7"
                    }
                ],
                "peer_hostname": "switch-2.net",
                "peer_software": "Cisco Internetwork Operating System Software  IOS (tm) s72033_rp Software (s72033_rp-PK9SV-M), Version 12.2(17d)SXB11a, RELEASE SOFTWARE (fc1) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2006 by cisco Systems, Inc. Compiled Thu 13-Apr-06 04:50 by kehsiao"
            },
            {
                "dets": {
                    "peer_ip": "10.151.28.7",
                    "platf_dets": {
                        "peer_capabilities": [
                            "Switch",
                            "IGMP"
                        ],
                        "peer_platform": "cisco WS-C3560-48TS"
                    }
                },
                "interfaces": [
                    {
                        "local_hostname": "my_switch_1",
                        "local_interface": "GigabitEthernet1/1",
                        "peer_interface": "GigabitEthernet0/1"
                    }
                ],
                "peer_hostname": "switch-3.net",
                "peer_software": "Cisco IOS Software, C3561 Software (C3560-IPBASE-M), Version 12.2(25)SEB2, RELEASE SOFTWARE (fc1) Copyright (c) 1986-2005 by Cisco Systems, Inc. Compiled Tue 07-Jun-05 23:34 by yenanh"
            }
        ]
    }
]
</output>
</template>



<template
name="Test21"
description="Template to test match variable count function and output macro function"
>
<input load="text">
Destination Address  Address Type  VLAN  Destination Port
-------------------  ------------  ----  --------------------
ac3a.7a1a.ba4b          Dynamic     100     Wlan-GigabitEthernet0
b0a7.376f.b3b4          Dynamic     100     FastEthernet7
bc5f.f435.fa0e          Dynamic     100     FastEthernet7
dc3a.5e67.1a98          Dynamic     100     FastEthernet7
dc3a.5ee2.6a95          Dynamic     100     Wlan-GigabitEthernet0
f04f.7c92.5a45          Dynamic     100     Wlan-GigabitEthernet0
0009.b754.1a88          Dynamic     200     FastEthernet7
10bd.1801.a0b4          Dynamic     200     FastEthernet3
204c.9ed7.cb80          Dynamic     200     FastEthernet2
a493.4cc1.67a7          Self        200     Vlan200
</input>

<input load="text">
Destination Address  Address Type  VLAN  Destination Port
-------------------  ------------  ----  --------------------
6400.f1cf.2cc6          Dynamic       1     Wlan-GigabitEthernet0
a493.4cc1.67a7          Self          1     Vlan1
000c.2906.17d6          Dynamic     100     FastEthernet7
000c.2913.421b          Dynamic     100     FastEthernet7
0018.0ab3.59f1          Dynamic     100     FastEthernet7
0018.dd32.1f7c          Dynamic     100     FastEthernet6
0025.64f5.d352          Dynamic     100     FastEthernet7
0026.abb9.a503          Dynamic     100     FastEthernet4
a493.4cc1.67a7          Self        100     Vlan100
</input>

<vars name="counters">
per_input_macs = 0
per_input_fast_eth_intf = 0
</vars>

<group name="macs">
{{ mac | count(var="per_input_macs", globvar="macs_glob") }}          {{ ignore }}       {{ ignore(r"\d+") }}     {{ interface }}
</group>

<group name="fast_eths">
{{ mac }}   {{ ignore }}  {{ ignore(r"\d+") }}  {{ interface | contains("Fast") | count(var="per_input_fast_eth_intf", globvar="fast_eth_intf_glob") }}
</group>

<macro>
def add_glob_counters(data):
    for item in data:
        item["counters"]["fast_eth_intf_glob"] = _ttp_["global_vars"]["fast_eth_intf_glob"]
        item["counters"]["macs_glob"] = _ttp_["global_vars"]["macs_glob"]
</macro>

<output macro="add_glob_counters"/>


<output
name="test21"
description="test match variable 'count' function and output macro"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
    [
        {
            "counters": {
                "fast_eth_intf_glob": 12,
                "macs_glob": 19,
                "per_input_fast_eth_intf": 6,
                "per_input_macs": 10
            },
            "fast_eths": [
                {
                    "interface": "FastEthernet7",
                    "mac": "b0a7.376f.b3b4"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "bc5f.f435.fa0e"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "dc3a.5e67.1a98"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0009.b754.1a88"
                },
                {
                    "interface": "FastEthernet3",
                    "mac": "10bd.1801.a0b4"
                },
                {
                    "interface": "FastEthernet2",
                    "mac": "204c.9ed7.cb80"
                }
            ],
            "macs": [
                {
                    "interface": "Wlan-GigabitEthernet0",
                    "mac": "ac3a.7a1a.ba4b"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "b0a7.376f.b3b4"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "bc5f.f435.fa0e"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "dc3a.5e67.1a98"
                },
                {
                    "interface": "Wlan-GigabitEthernet0",
                    "mac": "dc3a.5ee2.6a95"
                },
                {
                    "interface": "Wlan-GigabitEthernet0",
                    "mac": "f04f.7c92.5a45"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0009.b754.1a88"
                },
                {
                    "interface": "FastEthernet3",
                    "mac": "10bd.1801.a0b4"
                },
                {
                    "interface": "FastEthernet2",
                    "mac": "204c.9ed7.cb80"
                },
                {
                    "interface": "Vlan200",
                    "mac": "a493.4cc1.67a7"
                }
            ]
        },
        {
            "counters": {
                "fast_eth_intf_glob": 12,
                "macs_glob": 19,
                "per_input_fast_eth_intf": 6,
                "per_input_macs": 9
            },
            "fast_eths": [
                {
                    "interface": "FastEthernet7",
                    "mac": "000c.2906.17d6"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "000c.2913.421b"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0018.0ab3.59f1"
                },
                {
                    "interface": "FastEthernet6",
                    "mac": "0018.dd32.1f7c"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0025.64f5.d352"
                },
                {
                    "interface": "FastEthernet4",
                    "mac": "0026.abb9.a503"
                }
            ],
            "macs": [
                {
                    "interface": "Wlan-GigabitEthernet0",
                    "mac": "6400.f1cf.2cc6"
                },
                {
                    "interface": "Vlan1",
                    "mac": "a493.4cc1.67a7"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "000c.2906.17d6"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "000c.2913.421b"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0018.0ab3.59f1"
                },
                {
                    "interface": "FastEthernet6",
                    "mac": "0018.dd32.1f7c"
                },
                {
                    "interface": "FastEthernet7",
                    "mac": "0025.64f5.d352"
                },
                {
                    "interface": "FastEthernet4",
                    "mac": "0026.abb9.a503"
                },
                {
                    "interface": "Vlan100",
                    "mac": "a493.4cc1.67a7"
                }
            ]
        }
    ]
</output>
</template>


<template
name="Test22"
description="test'deepdiff' output function"
>
<input name="input_before" load="text">
interface FastEthernet1/0/1
 description Foo
!
</input>

<input name="input_before" load="text">
interface FastEthernet1/0/2
 description BarBar
!
</input>

<input name="one_more" load="text">
interface FastEthernet1/0/1
 description FooBar
!
</input>

<input name="input_after" load="text">
interface FastEthernet1/0/1
 description Bar
!
</input>

<input name="input_after" load="text">
interface FastEthernet1/0/2
 description BarBar
!
</input>

<group  
name="interfaces*">
interface {{ interface }}
 description {{ description }}
</group>

<output deepdiff="input_before, input_after, add_field=difference, ignore_order=False, verbose_level=2"/>

<output
name="test22"
description="test 'deepdiff' output function in 'bulk' mode"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
    [
    {
        "interfaces": [
            {
                "description": "Foo",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "BarBar",
                "interface": "FastEthernet1/0/2"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "FooBar",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "Bar",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "BarBar",
                "interface": "FastEthernet1/0/2"
            }
        ]
    },
        {
            "difference": {
                "values_changed": {
                    "root[0]['interfaces'][0]['description']": {
                        "new_value": "Bar",
                        "old_value": "Foo"
                    }
                }
            }
        }
    ]
</output>
</template>


<template name="lookup_db_1st"
description="this template results used by next template as a lookup table"
>
<input load="text">
asa# sh object-group id aws_criticalprd_us_west_2_app
object-group network aws_criticalprd_us_west_2_app
 network-object 10.159.160.0 255.255.248.0
 network-object 10.159.161.0 255.255.248.0
asa#  sh object-group id aws_criticalprd_us_west_2_db
object-group network aws_criticalprd_us_west_2_db
 network-object 10.159.168.0 255.255.248.0
</input>
<group name="{{ network_obj }}">
object-group network {{ network_obj }}
 network-object {{ subnets | PHRASE | to_list | joinmatches }}
</group>
</template>

<template name="test23"
description="template to test lookup using another template results, lookup_db_1st in this case"
>
<input load="text">
asa# sh object-group id aws_criticalprd_us_west_2_app_db
object-group network aws_criticalprd_us_west_2_app_db
 group-object aws_criticalprd_us_west_2_app
 group-object aws_criticalprd_us_west_2_db
</input>
<group name="{{ network_obj }}">
object-group network {{ network_obj }}
<group name="{{ grpoup_obj }}">
 group-object {{ grpoup_obj | lookup(template=lookup_db_1st, add_field=children) }}
</group>
</group>

<output
name="test23"
description="cross template lookup test"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "aws_criticalprd_us_west_2_app_db": {
            "aws_criticalprd_us_west_2_app": {
                "children": {
                    "subnets": [
                        "10.159.160.0 255.255.248.0",
                        "10.159.161.0 255.255.248.0"
                    ]
                }
            },
            "aws_criticalprd_us_west_2_db": {
                "children": {
                    "subnets": [
                        "10.159.168.0 255.255.248.0"
                    ]
                }
            }
        }
    }
]
</output>
</template>



<template
name="lookup_across_groups"
description="to test lokup function across group results"
>
<input load="text" name="test1-42_lookup_db_1st">
asa# sh object-group id aws_criticalprd_us_west_2_app
object-group network aws_criticalprd_us_west_2_app
 network-object 10.159.160.0 255.255.248.0
 network-object 10.159.161.0 255.255.248.0
asa#  sh object-group id aws_criticalprd_us_west_2_db
object-group network aws_criticalprd_us_west_2_db
 network-object 10.159.168.0 255.255.248.0
</input>
<group name="test1-42_lookup_db_1st.{{ network_obj }}" input="test1-42_lookup_db_1st">
object-group network {{ network_obj }}
 network-object {{ subnets | PHRASE | to_list | joinmatches }}
</group>

<input load="text" name="test1-42_lookup_db_2nd">
asa# sh object-group id aws_criticalprd_us_west_2_app_db
object-group network aws_criticalprd_us_west_2_app_db
 group-object aws_criticalprd_us_west_2_app
 group-object aws_criticalprd_us_west_2_db
</input>
<group name="test1-42_lookup_db_2nd.{{ network_obj }}" input="test1-42_lookup_db_2nd">
object-group network {{ network_obj }}
<group name="{{ grpoup_obj }}">
 group-object {{ grpoup_obj | lookup(group="test1-42_lookup_db_1st", add_field=children) }}
</group>
</group>

<output
name="test24"
description="cross group lookup test"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "test1-42_lookup_db_1st": {
            "aws_criticalprd_us_west_2_app": {
                "subnets": [
                    "10.159.160.0 255.255.248.0",
                    "10.159.161.0 255.255.248.0"
                ]
            },
            "aws_criticalprd_us_west_2_db": {
                "subnets": [
                    "10.159.168.0 255.255.248.0"
                ]
            }
        }
    },
    {
        "test1-42_lookup_db_2nd": {
            "aws_criticalprd_us_west_2_app_db": {
                "aws_criticalprd_us_west_2_app": {
                    "children": {
                        "subnets": [
                            "10.159.160.0 255.255.248.0",
                            "10.159.161.0 255.255.248.0"
                        ]
                    }
                },
                "aws_criticalprd_us_west_2_db": {
                    "children": {
                        "subnets": [
                            "10.159.168.0 255.255.248.0"
                        ]
                    }
                }
            }
        }
    }
]
</output>
</template>

<template
name="test24"
description="test handling of end when has child group">

<input load="text">
interface Port-channel6.15
 ip address 150.101.33.91 255.255.255.254
!
interface Port-channel6.608
 ip address 203.215.20.96 255.255.255.254
!
interface Port-channel10
 ip address 203.215.4.22 255.255.255.254
!
interface Port-channel10
 ip address 203.215.4.23 255.255.255.254
!
</input>

<group name="interfaces**.{{ interface }}**.subinterface:{{ subinterface }}">
interface {{ interface }}.{{ subinterface }}
<group name="ipv4_ips.{{ ipv4 }}">
 ip address {{ ipv4 }} {{ mask }}
 ip address {{ ipv4 }} {{ mask }} secondary
</group>
!{{ _end_ }}
</group>

<output
name="test25"
description="test handling of end re with child groups"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[{
    "interfaces": {
        "Port-channel6": {
            "subinterface:15": {
                "ipv4_ips": {
                    "150.101.33.91": {
                        "mask": "255.255.255.254"
                    }
                }
            },
            "subinterface:608": {
                "ipv4_ips": {
                    "203.215.20.96": {
                        "mask": "255.255.255.254"
                    }
                }
            }
        }
    }
}]
</output>
</template>

<template
name="Test26"
description="test 'deepdiff' output function with iterate mode"
>
<input name="input_before" load="text">
interface FastEthernet1/0/1
 description Foo
!
</input>

<input name="one_more" load="text">
interface FastEthernet1/0/1
 description FooBar
!
</input>

<input name="input_after" load="text">
interface FastEthernet1/0/1
 description Bar
!
</input>

<input name="input_after" load="text">
interface FastEthernet1/0/2
 description BarBar
!
</input>

<group  
name="interfaces*">
interface {{ interface }}
 description {{ description }}
</group>

<output deepdiff="input_before, input_after, mode=iterate, add_field=difference, ignore_order=False, verbose_level=2"/>

<output
name="test26"
description="test' deepdiff' output function in 'iterate' mode"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "interfaces": [
            {
                "description": "Foo",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "FooBar",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "Bar",
                "interface": "FastEthernet1/0/1"
            }
        ]
    },
    {
        "interfaces": [
            {
                "description": "BarBar",
                "interface": "FastEthernet1/0/2"
            }
        ]
    },
    {
        "difference": [
            {
                "values_changed": {
                    "root['interfaces'][0]['description']": {
                        "new_value": "Bar",
                        "old_value": "Foo"
                    }
                }
            },
            {
                "values_changed": {
                    "root['interfaces'][0]['description']": {
                        "new_value": "BarBar",
                        "old_value": "Foo"
                    },
                    "root['interfaces'][0]['interface']": {
                        "new_value": "FastEthernet1/0/2",
                        "old_value": "FastEthernet1/0/1"
                    }
                }
            }
        ]
    }
]
</output>
</template>


<template
name="Test27-data-before"
description="test26 source template to test 'deepdiff' output function with template results as a data before"
>
<input load="text">
switch-1#show run int
interface Vlan778
 description some description 1
 ip address 1.1.1.1/24
!
</input>
<vars>
hostname="gethostname"
</vars>
<group name="{{ hostname }}.interfaces.{{ interface }}">
interface {{ interface }}
 ip address {{ ip }}
</group>
</template>


<template name="test27"
description="test 'deepdiff' output function with template results as a data before"
>
<input load="text">
switch-1#show run int
interface Vlan778
 description some description 1
 ip address 1.1.1.2/24
!
</input>
<vars>
hostname="gethostname"
</vars>
<group name="{{ hostname }}.interfaces.{{ interface }}">
interface {{ interface }}
 ip address {{ ip }}
</group>
<output deepdiff="template_before='Test27-data-before'"/>

<output
name="test27"
description="deepdiff output function with template results as data_before, bulk mode"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
{
    "values_changed": {
        "root[0]['switch-1']['interfaces']['Vlan778']['ip']": {
            "new_value": "1.1.1.2/24",
            "old_value": "1.1.1.1/24"
        }
    }
}
</output>
</template>



<template
name="test28"
description="to test groups with defaults only but with children with defaults only as well"
>

<input load="text">
device-hostame uptime is 27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds

 another string matched_value_for_nested_child_from_input
</input>

<group name="uptime-1**">
device-hostame uptime is {{ uptime | PHRASE }}
<group name="child_with_default">
 some line with {{ var1 | default("val1") }}
</group>
</group>

<group name="domain" default="Uncknown">
Default domain is {{ fqdn }}
</group>

<group name="ntp-1**">
ntp server {{ server | default('Unconfigured') }}
 ntp source {{ source | default("undefined") }}
<group name="another_child_grp_with_default**">
 npt peer {{ val2 | default("None") }}
<group name="deeper_child_with_defaults" default="something">
 another string {{ val5 }}
 my string {{ val4 }}
</group>
</group>
<group name="another_child_grp_without_default">
 npt peers {{ val3 }}
</group>
</group>

<group name="ntp-2">
ntp server {{ server }}
 ntp source {{ source | default("undefined") }}
</group>

<group name="snmp-1" default="Uncknown">
snmp community {{ community }}
snmp acl {{ acl }}
</group>


<group name="snmp-2-with-group-output**" default="Uncknown" output="out-1">
snmp community {{ community }}
snmp acl {{ acl }}
<group name="snmp_child_with_defaults" default="None">
 snmp source {{ ip }}
</group>
<group name="snmp_child_without_defaults">
 snmp community {{ comm_val }}
</group>
</group>

<output name="out-1"/>

<output
name="test28"
description="groups with children with start re defaults"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[ [
        {
            "domain": {
                "fqdn": "Uncknown"
            },
            "ntp-1": {
                "another_child_grp_with_default": {
                    "deeper_child_with_defaults": {
                        "val4": "something",
                        "val5": "matched_value_for_nested_child_from_input"
                    },
                    "val2": "None"
                },
                "server": "Unconfigured",
                "source": "undefined"
            },
            "snmp-1": {
                "acl": "Uncknown",
                "community": "Uncknown"
            },
            "uptime-1": {
                "child_with_default": {
                    "var1": "val1"
                },
                "uptime": "27 weeks, 3 days, 10 hours, 46 minutes, 10 seconds"
            }
        },
        {
            "snmp-2-with-group-output": {
                "acl": "Uncknown",
                "community": "Uncknown",
                "snmp_child_with_defaults": {
                    "ip": "None"
                }
            }
        }
] ]
</output>
</template>


<template name="test29-1"
description="test 'gpvlookup' match variable function Python3"
>

<input load="text">
hostname DC1-SW-2
!
interface Vlan779
 ip address 2.2.2.2/24
</input>

<input load="text">
hostname rt-corp-01
!
interface Vlan333
 ip address 3.3.3.3/24
</input>

<input load="text">
hostname rt-edge-01
!
interface Vlan444
 ip address 4.3.3.3/24
</input>

<input load="text">
hostname DC1-edge-corp-01
!
interface Vlan555
 ip address 5.3.3.3/24
</input>

<lookup name="domains" load="python">
{
	"NETWORK_DOMAINS": {
		"DC1": ["DC1-*"],
		"CORP": ["*corp*"]
	}
}
</lookup>

<group void="">
hostname {{ hostname | record(hostname) | gpvlookup("domains.NETWORK_DOMAINS", record="network_domain") }}
</group>

<group name="hostnames_single_match_add_field">
hostname {{ hostname | gpvlookup("domains.NETWORK_DOMAINS", add_field="network_domain") }}
</group>

<group name="hostnames_multi_match_no_add_field">
hostname {{ hostname | gpvlookup("domains.NETWORK_DOMAINS", multimatch=True) }}
</group>

<group name="interfaces_record_test.{{ interface }}">
interface {{ interface }}
 ip address {{ ip }}
 {{ hostname | set(hostname) }}
 {{ network_domain | set(network_domain) }}
</group>



<output
name="test29-1"
description="test 'gpvlookup' match variable function - Python3"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    {
        "hostnames_multi_match_no_add_field": {
            "hostname": [
                "DC1"
            ]
        },
        "hostnames_single_match_add_field": {
            "hostname": "DC1-SW-2",
            "network_domain": [
                "DC1"
            ]
        },
        "interfaces_record_test": {
            "Vlan779": {
                "hostname": "DC1-SW-2",
                "ip": "2.2.2.2/24",
                "network_domain": [
                    "DC1"
                ]
            }
        }
    },
    {
        "hostnames_multi_match_no_add_field": {
            "hostname": [
                "CORP"
            ]
        },
        "hostnames_single_match_add_field": {
            "hostname": "rt-corp-01",
            "network_domain": [
                "CORP"
            ]
        },
        "interfaces_record_test": {
            "Vlan333": {
                "hostname": "rt-corp-01",
                "ip": "3.3.3.3/24",
                "network_domain": [
                    "CORP"
                ]
            }
        }
    },
    {
        "hostnames_multi_match_no_add_field": {
            "hostname": "rt-edge-01"
        },
        "hostnames_single_match_add_field": {
            "hostname": "rt-edge-01"
        },
        "interfaces_record_test": {
            "Vlan444": {
                "hostname": "rt-edge-01",
                "ip": "4.3.3.3/24",
                "network_domain": []
            }
        }
    },
    {
        "hostnames_multi_match_no_add_field": {
            "hostname": [
                "DC1",
                "CORP"
            ]
        },
        "hostnames_single_match_add_field": {
            "hostname": "DC1-edge-corp-01",
            "network_domain": [
                "DC1"
            ]
        },
        "interfaces_record_test": {
            "Vlan555": {
                "hostname": "DC1-edge-corp-01",
                "ip": "5.3.3.3/24",
                "network_domain": [
                    "DC1"
                ]
            }
        }
    }
]
</output>
</template>



<template name="test29-2"
description="test 'gpvlookup' match variable function Python2"
>

<input load="text">
hostname DC1-SW-2
!
interface Vlan779
 ip address 2.2.2.2/24
</input>

<input load="text">
hostname rt-corp-01
!
interface Vlan333
 ip address 3.3.3.3/24
</input>

<input load="text">
hostname rt-edge-01
!
interface Vlan444
 ip address 4.3.3.3/24
</input>

<input load="text">
hostname DC1-edge-corp-01
!
interface Vlan555
 ip address 5.3.3.3/24
</input>

<lookup name="domains" load="python">
{
	"NETWORK_DOMAINS": {
		"DC1": ["DC1-*"],
		"CORP": ["*corp*"]
	}
}
</lookup>

<group void="">
hostname {{ hostname | record(hostname) | gpvlookup("domains.NETWORK_DOMAINS", record="network_domain") }}
</group>

<group name="hostnames_single_match_add_field">
hostname {{ hostname | gpvlookup("domains.NETWORK_DOMAINS", add_field="network_domain") }}
</group>

<group name="hostnames_multi_match_no_add_field">
hostname {{ hostname | gpvlookup("domains.NETWORK_DOMAINS", multimatch=True) }}
</group>

<group name="interfaces_record_test.{{ interface }}">
interface {{ interface }}
 ip address {{ ip }}
 {{ hostname | set(hostname) }}
 {{ network_domain | set(network_domain) }}
</group>

<output
name="test29-2"
description="test 'gpvlookup' match variable function - Python2"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
   [
        {
            "hostnames_multi_match_no_add_field": {
                "hostname": [
                    "DC1"
                ]
            },
            "hostnames_single_match_add_field": {
                "hostname": "DC1-SW-2",
                "network_domain": [
                    "DC1"
                ]
            },
            "interfaces_record_test": {
                "Vlan779": {
                    "hostname": "DC1-SW-2",
                    "ip": "2.2.2.2/24",
                    "network_domain": [
                        "DC1"
                    ]
                }
            }
        },
        {
            "hostnames_multi_match_no_add_field": {
                "hostname": [
                    "CORP"
                ]
            },
            "hostnames_single_match_add_field": {
                "hostname": "rt-corp-01",
                "network_domain": [
                    "CORP"
                ]
            },
            "interfaces_record_test": {
                "Vlan333": {
                    "hostname": "rt-corp-01",
                    "ip": "3.3.3.3/24",
                    "network_domain": [
                        "CORP"
                    ]
                }
            }
        },
        {
            "hostnames_multi_match_no_add_field": {
                "hostname": "rt-edge-01"
            },
            "hostnames_single_match_add_field": {
                "hostname": "rt-edge-01"
            },
            "interfaces_record_test": {
                "Vlan444": {
                    "hostname": "rt-edge-01",
                    "ip": "4.3.3.3/24",
                    "network_domain": []
                }
            }
        },
        {
            "hostnames_multi_match_no_add_field": {
                "hostname": [
                    "CORP",
                    "DC1"
                ]
            },
            "hostnames_single_match_add_field": {
                "hostname": "DC1-edge-corp-01",
                "network_domain": [
                    "CORP"
                ]
            },
            "interfaces_record_test": {
                "Vlan555": {
                    "hostname": "DC1-edge-corp-01",
                    "ip": "5.3.3.3/24",
                    "network_domain": [
                        "CORP"
                    ]
                }
            }
        }
    ]
</output>
</template>


<template
name="test30"
description="test results forming for template with anonymous and named group"
>

<input name="1" load="text">
csw1# show ip ospf nei
 OSPF Process ID 1 VRF default
 Total number of neighbors: 2
csw1#
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
1.1.1.1         4 1234   20114   20119      555    0    0     1w6d 1         
1.1.1.2         4 4321   20275   20152      555    0    0     1w6d 13        
</input>

<input name="1" load="text">
csw2# show ip ospf nei
 OSPF Process ID 1 VRF default
 Total number of neighbors: 3
csw2#
Neighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
2.2.2.2         4 4567   20114   20119      555    0    0     1w6d 1         
2.2.2.3         4 7654   20275   20152      555    0    0     1w6d 13        
</input>
 
<group input="1">
 Total number of neighbors: {{ ospf_neighbour_count }}
</group>

<group name="bgp_peers" input="1">
{{ peer }}  4 {{ peer_as }}   20114   20119      555    0    0     {{ uptime }} {{ state }} 
</group>

<output
name="test30"
description="Results forming for template with anonymous and named group"
load="json"
functions="is_equal"
returner="terminal" colour=""  red="False" green="True"
format="tabulate"
format_attributes = "tablefmt='fancy_grid'"
>
[
    [
        {
            "ospf_neighbour_count": "2"
        },
        {
            "bgp_peers": [
                {
                    "peer": "1.1.1.1",
                    "peer_as": "1234",
                    "state": "1",
                    "uptime": "1w6d"
                },
                {
                    "peer": "1.1.1.2",
                    "peer_as": "4321",
                    "state": "13",
                    "uptime": "1w6d"
                }
            ]
        }
    ],
    [
        {
            "ospf_neighbour_count": "3"
        },
        {
            "bgp_peers": [
                {
                    "peer": "2.2.2.2",
                    "peer_as": "4567",
                    "state": "1",
                    "uptime": "1w6d"
                },
                {
                    "peer": "2.2.2.3",
                    "peer_as": "7654",
                    "state": "13",
                    "uptime": "1w6d"
                }
            ]
        }
    ]
]
</output>
</template>


</template>